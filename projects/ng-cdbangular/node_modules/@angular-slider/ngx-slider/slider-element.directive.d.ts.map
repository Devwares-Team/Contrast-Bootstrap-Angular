{"version":3,"file":"slider-element.directive.d.ts","sources":["slider-element.directive.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, Renderer2, ChangeDetectorRef } from '@angular/core';\nexport declare class SliderElementDirective {\n    protected elemRef: ElementRef;\n    protected renderer: Renderer2;\n    protected changeDetectionRef: ChangeDetectorRef;\n    private _position;\n    readonly position: number;\n    private _dimension;\n    readonly dimension: number;\n    private _alwaysHide;\n    readonly alwaysHide: boolean;\n    private _vertical;\n    readonly vertical: boolean;\n    private _scale;\n    readonly scale: number;\n    opacity: number;\n    visibility: string;\n    left: string;\n    bottom: string;\n    height: string;\n    width: string;\n    private eventListenerHelper;\n    private eventListeners;\n    constructor(elemRef: ElementRef, renderer: Renderer2, changeDetectionRef: ChangeDetectorRef);\n    setAlwaysHide(hide: boolean): void;\n    hide(): void;\n    show(): void;\n    isVisible(): boolean;\n    setVertical(vertical: boolean): void;\n    setScale(scale: number): void;\n    setPosition(pos: number): void;\n    calculateDimension(): void;\n    setDimension(dim: number): void;\n    getBoundingClientRect(): ClientRect;\n    on(eventName: string, callback: (event: any) => void, debounceInterval?: number): void;\n    onPassive(eventName: string, callback: (event: any) => void, debounceInterval?: number): void;\n    off(eventName?: string): void;\n    private isRefDestroyed();\n}\n"]}