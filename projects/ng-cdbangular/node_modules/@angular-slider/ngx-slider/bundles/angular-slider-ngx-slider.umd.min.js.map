{"version":3,"sources":["ng://@angular-slider/ngx-slider/options.ts","ng://@angular-slider/ngx-slider/pointer-type.ts","ng://@angular-slider/ngx-slider/change-context.ts","ng://@angular-slider/ngx-slider/value-helper.ts","ng://@angular-slider/ngx-slider/compatibility-helper.ts","ng://@angular-slider/ngx-slider/math-helper.ts","ng://@angular-slider/ngx-slider/event-listener.ts","ng://@angular-slider/ngx-slider/event-listener-helper.ts","ng://@angular-slider/ngx-slider/slider-element.directive.ts","ng://@angular-slider/ngx-slider/slider-handle.directive.ts","ng://@angular-slider/ngx-slider/slider-label.directive.ts","ng://@angular-slider/ngx-slider/slider.component.ts","ng://@angular-slider/ngx-slider/tooltip-wrapper.component.ts","ng://@angular-slider/ngx-slider/slider.module.ts"],"sourcesContent":["import { PointerType } from './pointer-type';\n\n/** Label type */\nexport enum LabelType {\n  /** Label above low pointer */\n  Low,\n  /** Label above high pointer */\n  High,\n  /** Label for minimum slider value */\n  Floor,\n  /** Label for maximum slider value */\n  Ceil,\n  /** Label below legend tick */\n  TickValue\n}\n\n/** Function to translate label value into text */\nexport type TranslateFunction = (value: number, label: LabelType) => string;\n/** Function to combind */\nexport type CombineLabelsFunction = (minLabel: string, maxLabel: string) => string;\n/** Function to provide legend  */\nexport type GetLegendFunction = (value: number) => string;\n\n/** Function converting slider value to slider position */\nexport type ValueToPositionFunction = (val: number, minVal: number, maxVal: number) => number;\n\n/** Function converting slider position to slider value */\nexport type PositionToValueFunction = (percent: number, minVal: number, maxVal: number) => number;\n\n/**\n * Custom step definition\n *\n * This can be used to specify custom values and legend values for slider ticks\n */\nexport interface CustomStepDefinition {\n  /** Value */\n  value: number;\n  /** Legend (label for the value) */\n  legend?: string;\n}\n\n/** Slider options */\nexport class Options {\n  /** Minimum value for a slider.\n    Not applicable when using stepsArray. */\n  floor?: number = 0;\n\n  /** Maximum value for a slider.\n    Not applicable when using stepsArray. */\n  ceil?: number = null;\n\n  /** Step between each value.\n    Not applicable when using stepsArray. */\n  step?: number = 1;\n\n  /** The minimum range authorized on the slider.\n    Applies to range slider only.\n    When using stepsArray, expressed as index into stepsArray. */\n  minRange?: number = null;\n\n  /** The maximum range authorized on the slider.\n    Applies to range slider only.\n    When using stepsArray, expressed as index into stepsArray. */\n  maxRange?: number = null;\n\n  /** Set to true to have a push behavior. When the min handle goes above the max,\n    the max is moved as well (and vice-versa). The range between min and max is\n    defined by the step option (defaults to 1) and can also be overriden by\n    the minRange option. Applies to range slider only. */\n  pushRange?: boolean = false;\n\n  /** The minimum value authorized on the slider.\n    When using stepsArray, expressed as index into stepsArray. */\n  minLimit?: number = null;\n\n  /** The maximum value authorized on the slider.\n    When using stepsArray, expressed as index into stepsArray. */\n  maxLimit?: number = null;\n\n  /** Custom translate function. Use this if you want to translate values displayed\n      on the slider. */\n  translate?: TranslateFunction = null;\n\n  /** Custom function for combining overlapping labels in range slider.\n      It takes the min and max values (already translated with translate fuction)\n      and should return how these two values should be combined.\n      If not provided, the default function will join the two values with\n      ' - ' as separator. */\n  combineLabels?: CombineLabelsFunction = null;\n\n  /** Use to display legend under ticks (thus, it needs to be used along with\n     showTicks or showTicksValues). The function will be called with each tick\n     value and returned content will be displayed under the tick as a legend.\n     If the returned value is null, then no legend is displayed under\n     the corresponding tick.You can also directly provide the legend values\n     in the stepsArray option. */\n  getLegend?: GetLegendFunction = null;\n\n  /** If you want to display a slider with non linear/number steps.\n     Just pass an array with each slider value and that's it; the floor, ceil and step settings\n     of the slider will be computed automatically.\n     By default, the value model and valueHigh model values will be the value of the selected item\n     in the stepsArray.\n     They can also be bound to the index of the selected item by setting the bindIndexForStepsArray\n     option to true. */\n  stepsArray?: CustomStepDefinition[] = null;\n\n  /** Set to true to bind the index of the selected item to value model and valueHigh model. */\n  bindIndexForStepsArray?: boolean = false;\n\n  /** When set to true and using a range slider, the range can be dragged by the selection bar.\n    Applies to range slider only. */\n  draggableRange?: boolean = false;\n\n  /** Same as draggableRange but the slider range can't be changed.\n    Applies to range slider only. */\n  draggableRangeOnly?: boolean = false;\n\n  /** Set to true to always show the selection bar before the slider handle. */\n  showSelectionBar?: boolean = false;\n\n  /** Set to true to always show the selection bar after the slider handle. */\n  showSelectionBarEnd?: boolean = false;\n\n  /**  Set a number to draw the selection bar between this value and the slider handle.\n    When using stepsArray, expressed as index into stepsArray. */\n  showSelectionBarFromValue?: number = null;\n\n  /**  Only for range slider. Set to true to visualize in different colour the areas\n    on the left/right (top/bottom for vertical range slider) of selection bar between the handles. */\n  showOuterSelectionBars?: boolean = false;\n\n  /** Set to true to hide pointer labels */\n  hidePointerLabels?: boolean = false;\n\n  /** Set to true to hide min / max labels  */\n  hideLimitLabels?: boolean = false;\n\n  /** Set to false to disable the auto-hiding behavior of the limit labels. */\n  autoHideLimitLabels?: boolean = true;\n\n  /** Set to true to make the slider read-only. */\n  readOnly?: boolean = false;\n\n  /** Set to true to disable the slider. */\n  disabled?: boolean = false;\n\n  /** Throttle interval for mouse events in milliseconds.\n   * This is provided to avoid a flood of events when moving the slider with mouse. */\n  mouseEventsInterval?: number = 50;\n\n  /** Throttle interval for touch events in milliseconds.\n   * This is provided to avoid a flood of events when moving the slider with touch gesture. */\n  touchEventsInterval?: number = 50;\n\n  /** Throttle interval for input changes (changes to bindings or reactive form inputs)\n   * This is provided to avoid a flood of events on frequent input binding changes affecting performance. */\n  inputEventsInterval?: number = 100;\n\n  /** Throttle interval for output changes (signalling changes to output bindings and user callbacks)\n   * This is provided to avoid a flood of outgoing events affecting Angular app performance. */\n  outputEventsInterval?: number = 100;\n\n  /** Set to true to display a tick for each step of the slider. */\n  showTicks?: boolean = false;\n\n  /** Set to true to display a tick and the step value for each step of the slider.. */\n  showTicksValues?: boolean = false;\n\n  /* The step between each tick to display. If not set, the step value is used.\n    Not used when ticksArray is specified. */\n  tickStep?: number = null;\n\n  /* The step between displaying each tick step value.\n    If not set, then tickStep or step is used, depending on which one is set. */\n  tickValueStep?: number = null;\n\n  /** Use to display ticks at specific positions.\n    The array contains the index of the ticks that should be displayed.\n    For example, [0, 1, 5] will display a tick for the first, second and sixth values. */\n  ticksArray?: number[] = null;\n\n  /** Used to display a tooltip when a tick is hovered.\n    Set to a function that returns the tooltip content for a given value. */\n  ticksTooltip?: (value: number) => string = null;\n\n  /** Same as ticksTooltip but for ticks values. */\n  ticksValuesTooltip?: (value: number) => string = null;\n\n  /** Set to true to display the slider vertically.\n    The slider will take the full height of its parent.\n    Changing this value at runtime is not currently supported. */\n  vertical?: boolean = false;\n\n  /** Function that returns the current color of the selection bar.\n    If your color won't change, don't use this option but set it through CSS.\n    If the returned color depends on a model value (either value or valueHigh),\n    you should use the argument passed to the function.\n    Indeed, when the function is called, there is no certainty that the model\n    has already been updated.*/\n  getSelectionBarColor?: (minValue: number, maxValue?: number) => string = null;\n\n  /** Function that returns the color of a tick. showTicks must be enabled. */\n  getTickColor?: (value: number) => string = null;\n\n  /** Function that returns the current color of a pointer.\n    If your color won't change, don't use this option but set it through CSS.\n    If the returned color depends on a model value (either value or valueHigh),\n    you should use the argument passed to the function.\n    Indeed, when the function is called, there is no certainty that the model has already been updated.\n    To handle range slider pointers independently, you should evaluate pointerType within the given\n    function where \"min\" stands for value model and \"max\" for valueHigh model values. */\n  getPointerColor?: (value: number, pointerType: PointerType) => string = null;\n\n  /** Handles are focusable (on click or with tab) and can be modified using the following keyboard controls:\n    Left/bottom arrows: -1\n    Right/top arrows: +1\n    Page-down: -10%\n    Page-up: +10%\n    Home: minimum value\n    End: maximum value\n   */\n  keyboardSupport?: boolean = true;\n\n  /** If you display the slider in an element that uses transform: scale(0.5), set the scale value to 2\n    so that the slider is rendered properly and the events are handled correctly. */\n  scale?: number = 1;\n\n  /** Set to true to force the value(s) to be rounded to the step, even when modified from the outside.\n    When set to false, if the model values are modified from outside the slider, they are not rounded\n    and can be between two steps. */\n  enforceStep?: boolean = true;\n\n  /** Set to true to force the value(s) to be normalised to allowed range (floor to ceil), even when modified from the outside.\n    When set to false, if the model values are modified from outside the slider, and they are outside allowed range,\n    the slider may be rendered incorrectly. However, setting this to false may be useful if you want to perform custom normalisation. */\n  enforceRange?: boolean = true;\n\n  /** Set to true to force the value(s) to be rounded to the nearest step value, even when modified from the outside.\n    When set to false, if the model values are modified from outside the slider, and they are outside allowed range,\n    the slider may be rendered incorrectly. However, setting this to false may be useful if you want to perform custom normalisation. */\n  enforceStepsArray?: boolean = true;\n\n  /** Set to true to prevent to user from switching the min and max handles. Applies to range slider only. */\n  noSwitching?: boolean = false;\n\n  /** Set to true to only bind events on slider handles. */\n  onlyBindHandles?: boolean = false;\n\n  /** Set to true to show graphs right to left.\n    If vertical is true it will be from top to bottom and left / right arrow functions reversed. */\n  rightToLeft?: boolean = false;\n\n  /** Set to true to reverse keyboard navigation:\n    Right/top arrows: -1\n    Left/bottom arrows: +1\n    Page-up: -10%\n    Page-down: +10%\n    End: minimum value\n    Home: maximum value\n   */\n  reversedControls?: boolean = false;\n\n  /** Set to true to keep the slider labels inside the slider bounds. */\n  boundPointerLabels?: boolean = true;\n\n  /** Set to true to use a logarithmic scale to display the slider.  */\n  logScale?: boolean = false;\n\n  /** Function that returns the position on the slider for a given value.\n    The position must be a percentage between 0 and 1.\n    The function should be monotonically increasing or decreasing; otherwise the slider may behave incorrectly. */\n  customValueToPosition?: ValueToPositionFunction = null;\n\n  /** Function that returns the value for a given position on the slider.\n    The position is a percentage between 0 and 1.\n    The function should be monotonically increasing or decreasing; otherwise the slider may behave incorrectly. */\n  customPositionToValue?: PositionToValueFunction = null;\n\n  /** Precision limit for calculated values.\n    Values used in calculations will be rounded to this number of significant digits\n    to prevent accumulating small floating-point errors. */\n  precisionLimit?: number = 12;\n\n  /** Use to display the selection bar as a gradient.\n    The given object must contain from and to properties which are colors. */\n  selectionBarGradient?: {from: string, to: string} = null;\n\n  /** Use to add a label directly to the slider for accessibility. Adds the aria-label attribute. */\n  ariaLabel?: string = null;\n\n  /** Use instead of ariaLabel to reference the id of an element which will be used to label the slider.\n    Adds the aria-labelledby attribute. */\n  ariaLabelledBy?: string = null;\n\n  /** Use to add a label directly to the slider range for accessibility. Adds the aria-label attribute. */\n  ariaLabelHigh?: string = null;\n\n  /** Use instead of ariaLabelHigh to reference the id of an element which will be used to label the slider range.\n    Adds the aria-labelledby attribute. */\n  ariaLabelledByHigh?: string = null;\n\n  /** Use to increase rendering performance. If the value is not provided, the slider calculates the with/height of the handle */\n  handleDimension?: number = null;\n\n  /** Use to increase rendering performance. If the value is not provided, the slider calculates the with/height of the bar */\n  barDimension?: number = null;\n\n  /** Enable/disable CSS animations */\n  animate?: boolean = true;\n\n  /** Enable/disable CSS animations while moving the slider */\n  animateOnMove?: boolean = false;\n}\n","/** Pointer type */\nexport enum PointerType {\n  /** Low pointer */\n  Min,\n  /** High pointer */\n  Max\n}\n","import { PointerType } from './pointer-type';\n\nexport class ChangeContext {\n  value: number;\n  highValue?: number;\n  pointerType: PointerType;\n}\n","import { CustomStepDefinition } from './options';\n\n/**\n *  Collection of functions to handle conversions/lookups of values\n */\nexport class ValueHelper {\n  static isNullOrUndefined(value: any): boolean {\n    return value === undefined || value === null;\n  }\n\n  static areArraysEqual(array1: any[], array2: any[]): boolean {\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    for (let i: number = 0; i < array1.length; ++i) {\n      if (array1[i] !== array2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  static linearValueToPosition(val: number, minVal: number, maxVal: number): number {\n    const range: number = maxVal - minVal;\n    return (val - minVal) / range;\n  }\n\n  static logValueToPosition(val: number, minVal: number, maxVal: number): number {\n    val = Math.log(val);\n    minVal = Math.log(minVal);\n    maxVal = Math.log(maxVal);\n    const range: number = maxVal - minVal;\n    return (val - minVal) / range;\n  }\n\n  static linearPositionToValue(percent: number, minVal: number, maxVal: number): number {\n    return percent * (maxVal - minVal) + minVal;\n  }\n\n  static logPositionToValue(percent: number, minVal: number, maxVal: number): number {\n    minVal = Math.log(minVal);\n    maxVal = Math.log(maxVal);\n    const value: number = percent * (maxVal - minVal) + minVal;\n    return Math.exp(value);\n  }\n\n  static findStepIndex(modelValue: number, stepsArray: CustomStepDefinition[]): number {\n    const differences: number[] = stepsArray.map((step: CustomStepDefinition): number => Math.abs(modelValue - step.value));\n\n    let minDifferenceIndex: number = 0;\n    for (let index: number = 0; index < stepsArray.length; index++) {\n      if (differences[index] !== differences[minDifferenceIndex] && differences[index] < differences[minDifferenceIndex]) {\n        minDifferenceIndex = index;\n      }\n    }\n\n    return minDifferenceIndex;\n  }\n}\n","// Declaration for ResizeObserver a new API available in some of newest browsers:\n// https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\ndeclare class ResizeObserver {\n}\n\n/** Helper with compatibility functions to support different browsers */\nexport class CompatibilityHelper {\n  /** Workaround for TouchEvent constructor sadly not being available on all browsers (e.g. Firefox, Safari) */\n  public static isTouchEvent(event: any): boolean {\n    if ((window as any).TouchEvent !== undefined) {\n      return event instanceof TouchEvent;\n    }\n\n    return event.touches !== undefined;\n  }\n\n  /** Detect presence of ResizeObserver API */\n  public static isResizeObserverAvailable(): boolean {\n    return (window as any).ResizeObserver !== undefined;\n  }\n}\n","/** Helper with mathematical functions */\nexport class MathHelper {\n  /* Round numbers to a given number of significant digits */\n  static roundToPrecisionLimit(value: number, precisionLimit: number): number {\n    return +( value.toPrecision(precisionLimit) );\n  }\n\n  static isModuloWithinPrecisionLimit(value: number, modulo: number, precisionLimit: number): boolean {\n    const limit: number = Math.pow(10, -precisionLimit);\n    return Math.abs(value % modulo) <= limit || Math.abs(Math.abs(value % modulo) - modulo) <= limit;\n  }\n\n  static clampToRange(value: number, floor: number, ceil: number): number {\n    return Math.min(Math.max(value, floor), ceil);\n  }\n}\n","import { Subject, Subscription } from 'rxjs';\n\nexport class EventListener {\n  eventName: string = null;\n  events: Subject<Event> = null;\n  eventsSubscription: Subscription = null;\n  teardownCallback: () => void = null;\n}\n","import { Renderer2 } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { throttleTime, tap } from 'rxjs/operators';\nimport detectPassiveEvents from 'detect-passive-events';\n\nimport { EventListener } from './event-listener';\nimport { ValueHelper } from './value-helper';\n\n/**\n * Helper class to attach event listeners to DOM elements with debounce support using rxjs\n */\nexport class EventListenerHelper {\n  constructor(private renderer: Renderer2) {\n  }\n\n  public attachPassiveEventListener(nativeElement: any, eventName: string, callback: (event: any) => void,\n      throttleInterval?: number): EventListener {\n    // Only use passive event listeners if the browser supports it\n    if (detectPassiveEvents.hasSupport !== true) {\n      return this.attachEventListener(nativeElement, eventName, callback, throttleInterval);\n    }\n\n    // Angular doesn't support passive event handlers (yet), so we need to roll our own code using native functions\n    const listener: EventListener = new EventListener();\n    listener.eventName = eventName;\n    listener.events = new Subject<Event>();\n\n    const observerCallback: (event: Event) => void = (event: Event): void => {\n      listener.events.next(event);\n    };\n    nativeElement.addEventListener(eventName, observerCallback, {passive: true, capture: false});\n\n    listener.teardownCallback = (): void => {\n      nativeElement.removeEventListener(eventName, observerCallback, {passive: true, capture: false});\n    };\n\n    listener.eventsSubscription = listener.events\n      .pipe((!ValueHelper.isNullOrUndefined(throttleInterval))\n        ? throttleTime(throttleInterval, undefined, { leading: true, trailing: true})\n        : tap(() => {}) // no-op\n      )\n      .subscribe((event: Event) => {\n        callback(event);\n      });\n\n    return listener;\n  }\n\n  public detachEventListener(eventListener: EventListener): void {\n    if (!ValueHelper.isNullOrUndefined(eventListener.eventsSubscription)) {\n      eventListener.eventsSubscription.unsubscribe();\n      eventListener.eventsSubscription = null;\n    }\n\n    if (!ValueHelper.isNullOrUndefined(eventListener.events)) {\n      eventListener.events.complete();\n      eventListener.events = null;\n    }\n\n    if (!ValueHelper.isNullOrUndefined(eventListener.teardownCallback)) {\n      eventListener.teardownCallback();\n      eventListener.teardownCallback = null;\n    }\n  }\n\n  public attachEventListener(nativeElement: any, eventName: string, callback: (event: any) => void,\n      throttleInterval?: number): EventListener {\n    const listener: EventListener = new EventListener();\n    listener.eventName = eventName;\n    listener.events = new Subject<Event>();\n\n    const observerCallback: (event: Event) => void = (event: Event): void => {\n      listener.events.next(event);\n    };\n\n    listener.teardownCallback = this.renderer.listen(nativeElement, eventName, observerCallback);\n\n    listener.eventsSubscription = listener.events\n      .pipe((!ValueHelper.isNullOrUndefined(throttleInterval))\n          ? throttleTime(throttleInterval, undefined, { leading: true, trailing: true})\n          : tap(() => {}) // no-op\n      )\n      .subscribe((event: Event) => { callback(event); });\n\n    return listener;\n  }\n}\n","import { Directive, ElementRef, Renderer2, HostBinding, ChangeDetectorRef } from '@angular/core';\nimport { EventListenerHelper } from './event-listener-helper';\nimport { EventListener } from './event-listener';\nimport { ValueHelper } from './value-helper';\n\n@Directive({\n  selector: '[ngxSliderElement]'\n})\nexport class SliderElementDirective {\n  private _position: number = 0;\n  get position(): number {\n    return this._position;\n  }\n\n  private _dimension: number = 0;\n  get dimension(): number {\n    return this._dimension;\n  }\n\n  private _alwaysHide: boolean = false;\n  get alwaysHide(): boolean {\n    return this._alwaysHide;\n  }\n\n  private _vertical: boolean = false;\n  get vertical(): boolean {\n    return this._vertical;\n  }\n\n  private _scale: number = 1;\n  get scale(): number {\n    return this._scale;\n  }\n\n  @HostBinding('style.opacity')\n  opacity: number = 1;\n\n  @HostBinding('style.visibility')\n  visibility: string = 'visible';\n\n  @HostBinding('style.left')\n  left: string = '';\n\n  @HostBinding('style.bottom')\n  bottom: string = '';\n\n  @HostBinding('style.height')\n  height: string = '';\n\n  @HostBinding('style.width')\n  width: string = '';\n\n  private eventListenerHelper: EventListenerHelper;\n  private eventListeners: EventListener[] = [];\n\n  constructor(protected elemRef: ElementRef, protected renderer: Renderer2, protected changeDetectionRef: ChangeDetectorRef) {\n    this.eventListenerHelper = new EventListenerHelper(this.renderer);\n  }\n\n  setAlwaysHide(hide: boolean): void {\n    this._alwaysHide = hide;\n    if (hide) {\n      this.visibility = 'hidden';\n    } else {\n      this.visibility = 'visible';\n    }\n  }\n\n  hide(): void {\n    this.opacity = 0;\n  }\n\n  show(): void {\n    if (this.alwaysHide) {\n      return;\n    }\n\n    this.opacity = 1;\n  }\n\n  isVisible(): boolean {\n    if (this.alwaysHide) {\n      return false;\n    }\n    return this.opacity !== 0;\n  }\n\n  setVertical(vertical: boolean): void {\n    this._vertical = vertical;\n    if (this._vertical) {\n      this.left = '';\n      this.width = '';\n    } else {\n      this.bottom = '';\n      this.height = '';\n    }\n  }\n\n  setScale(scale: number): void {\n    this._scale = scale;\n  }\n\n   // Set element left/top position depending on whether slider is horizontal or vertical\n  setPosition(pos: number): void {\n    if (this._position !== pos && !this.isRefDestroyed()) {\n      this.changeDetectionRef.markForCheck();\n    }\n\n    this._position = pos;\n    if (this._vertical) {\n      this.bottom = Math.round(pos) + 'px';\n    } else {\n      this.left = Math.round(pos) + 'px';\n    }\n  }\n\n  // Calculate element's width/height depending on whether slider is horizontal or vertical\n  calculateDimension(): void {\n    const val: ClientRect = this.getBoundingClientRect();\n    if (this.vertical) {\n      this._dimension = (val.bottom - val.top) * this.scale;\n    } else {\n      this._dimension = (val.right - val.left) * this.scale;\n    }\n  }\n\n  // Set element width/height depending on whether slider is horizontal or vertical\n  setDimension(dim: number): void {\n    if (this._dimension !== dim && !this.isRefDestroyed()) {\n      this.changeDetectionRef.markForCheck();\n    }\n\n    this._dimension = dim;\n    if (this._vertical) {\n      this.height = Math.round(dim) + 'px';\n    } else {\n      this.width = Math.round(dim) + 'px';\n    }\n  }\n\n  getBoundingClientRect(): ClientRect {\n    return this.elemRef.nativeElement.getBoundingClientRect();\n  }\n\n  on(eventName: string, callback: (event: any) => void, debounceInterval?: number): void {\n    const listener: EventListener = this.eventListenerHelper.attachEventListener(\n      this.elemRef.nativeElement, eventName, callback, debounceInterval);\n    this.eventListeners.push(listener);\n  }\n\n  onPassive(eventName: string, callback: (event: any) => void, debounceInterval?: number): void {\n    const listener: EventListener = this.eventListenerHelper.attachPassiveEventListener(\n      this.elemRef.nativeElement, eventName, callback, debounceInterval);\n    this.eventListeners.push(listener);\n  }\n\n  off(eventName?: string): void {\n    let listenersToKeep: EventListener[];\n    let listenersToRemove: EventListener[];\n    if (!ValueHelper.isNullOrUndefined(eventName)) {\n      listenersToKeep = this.eventListeners.filter((event: EventListener) => event.eventName !== eventName);\n      listenersToRemove = this.eventListeners.filter((event: EventListener) => event.eventName === eventName);\n    } else {\n      listenersToKeep = [];\n      listenersToRemove = this.eventListeners;\n    }\n\n    for (const listener of listenersToRemove) {\n      this.eventListenerHelper.detachEventListener(listener);\n    }\n\n    this.eventListeners = listenersToKeep;\n  }\n\n  private isRefDestroyed(): boolean {\n    return ValueHelper.isNullOrUndefined(this.changeDetectionRef) || this.changeDetectionRef['destroyed'];\n  }\n}\n","import { Directive, ElementRef, Renderer2, HostBinding, ChangeDetectorRef } from '@angular/core';\nimport { SliderElementDirective } from './slider-element.directive';\n\n@Directive({\n  selector: '[ngxSliderHandle]'\n})\nexport class SliderHandleDirective extends SliderElementDirective {\n  @HostBinding('class.ngx-slider-active')\n  active: boolean = false;\n\n  @HostBinding('attr.role')\n  role: string = '';\n\n  @HostBinding('attr.tabindex')\n  tabindex: string = '';\n\n  @HostBinding('attr.aria-orientation')\n  ariaOrientation: string = '';\n\n  @HostBinding('attr.aria-label')\n  ariaLabel: string = '';\n\n  @HostBinding('attr.aria-labelledby')\n  ariaLabelledBy: string = '';\n\n  @HostBinding('attr.aria-valuenow')\n  ariaValueNow: string = '';\n\n  @HostBinding('attr.aria-valuetext')\n  ariaValueText: string = '';\n\n  @HostBinding('attr.aria-valuemin')\n  ariaValueMin: string = '';\n\n  @HostBinding('attr.aria-valuemax')\n  ariaValueMax: string = '';\n\n  focus(): void {\n    this.elemRef.nativeElement.focus();\n  }\n\n  constructor(elemRef: ElementRef, renderer: Renderer2, changeDetectionRef: ChangeDetectorRef) {\n    super(elemRef, renderer, changeDetectionRef);\n  }\n}\n","import { ChangeDetectorRef, Directive, ElementRef, Renderer2 } from '@angular/core';\nimport { SliderElementDirective } from './slider-element.directive';\nimport { ValueHelper } from './value-helper';\n\n@Directive({\n  selector: '[ngxSliderLabel]'\n})\nexport class SliderLabelDirective extends SliderElementDirective {\n  private _value: string = null;\n  get value(): string {\n    return this._value;\n  }\n\n  constructor(elemRef: ElementRef, renderer: Renderer2, changeDetectionRef: ChangeDetectorRef) {\n    super(elemRef, renderer, changeDetectionRef);\n  }\n\n  setValue(value: string): void {\n    let recalculateDimension: boolean = false;\n\n    if (!this.alwaysHide &&\n        (ValueHelper.isNullOrUndefined(this.value) ||\n         this.value.length !== value.length ||\n         (this.value.length > 0 && this.dimension === 0))) {\n      recalculateDimension = true;\n    }\n\n    this._value = value;\n    this.elemRef.nativeElement.innerHTML = value;\n\n    // Update dimension only when length of the label have changed\n    if (recalculateDimension) {\n      this.calculateDimension();\n    }\n  }\n}\n","import {\n  Component,\n  OnInit,\n  ViewChild,\n  AfterViewInit,\n  OnChanges,\n  OnDestroy,\n  HostBinding,\n  HostListener,\n  Input,\n  ElementRef,\n  Renderer2,\n  EventEmitter,\n  Output,\n  ContentChild,\n  TemplateRef,\n  ChangeDetectorRef,\n  SimpleChanges,\n  forwardRef,\n  NgZone\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subject, Subscription } from 'rxjs';\nimport { distinctUntilChanged, filter, throttleTime, tap } from 'rxjs/operators';\n\nimport detectPassiveEvents from 'detect-passive-events';\n\nimport {\n  Options,\n  LabelType,\n  ValueToPositionFunction,\n  PositionToValueFunction,\n  CustomStepDefinition\n} from './options';\nimport { PointerType } from './pointer-type';\nimport { ChangeContext } from './change-context';\nimport { ValueHelper } from './value-helper';\nimport { CompatibilityHelper } from './compatibility-helper';\nimport { MathHelper } from './math-helper';\nimport { EventListener } from './event-listener';\nimport { EventListenerHelper } from './event-listener-helper';\nimport { SliderElementDirective } from './slider-element.directive';\nimport { SliderHandleDirective } from './slider-handle.directive';\nimport { SliderLabelDirective } from './slider-label.directive';\n\n// Declaration for ResizeObserver a new API available in some of newest browsers:\n// https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\ndeclare class ResizeObserver {\n  constructor(callback: () => void);\n  observe(target: any): void;\n  unobserve(target: any): void;\n  disconnect(): void;\n}\n\nexport class Tick {\n  selected: boolean = false;\n  style: any = {};\n  tooltip: string = null;\n  tooltipPlacement: string = null;\n  value: string = null;\n  valueTooltip: string = null;\n  valueTooltipPlacement: string = null;\n  legend: string = null;\n}\n\nclass Dragging {\n  active: boolean = false;\n  value: number = 0;\n  difference: number = 0;\n  position: number = 0;\n  lowLimit: number = 0;\n  highLimit: number = 0;\n}\n\nclass ModelValues {\n  value: number;\n  highValue: number;\n\n  public static compare(x?: ModelValues, y?: ModelValues): boolean {\n    if (ValueHelper.isNullOrUndefined(x) && ValueHelper.isNullOrUndefined(y)) {\n      return false;\n    }\n    if (ValueHelper.isNullOrUndefined(x) !== ValueHelper.isNullOrUndefined(y)) {\n      return false;\n    }\n    return x.value === y.value && x.highValue === y.highValue;\n  }\n}\n\nclass ModelChange extends ModelValues {\n  // Flag used to by-pass distinctUntilChanged() filter on input values\n  // (sometimes there is a need to pass values through even though the model values have not changed)\n  forceChange: boolean;\n\n  public static compare(x?: ModelChange, y?: ModelChange): boolean {\n    if (ValueHelper.isNullOrUndefined(x) && ValueHelper.isNullOrUndefined(y)) {\n      return false;\n    }\n    if (ValueHelper.isNullOrUndefined(x) !== ValueHelper.isNullOrUndefined(y)) {\n      return false;\n    }\n    return x.value === y.value &&\n           x.highValue === y.highValue &&\n           x.forceChange === y.forceChange;\n  }\n}\n\nclass InputModelChange extends ModelChange {\n  internalChange: boolean;\n}\n\nclass OutputModelChange extends ModelChange {\n  userEventInitiated: boolean;\n}\n\nconst NGX_SLIDER_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => SliderComponent),\n  multi: true,\n};\n\n\n@Component({\n  selector: 'ngx-slider',\n  template: `<!-- // 0 Left selection bar outside two handles -->\n<span ngxSliderElement #leftOuterSelectionBar class=\"ngx-slider-span ngx-slider-bar-wrapper ngx-slider-left-out-selection\">\n  <span class=\"ngx-slider-span ngx-slider-bar\"></span>\n</span>\n<!-- // 1 Right selection bar outside two handles -->\n<span ngxSliderElement #rightOuterSelectionBar class=\"ngx-slider-span ngx-slider-bar-wrapper ngx-slider-right-out-selection\">\n  <span class=\"ngx-slider-span ngx-slider-bar\"></span>\n</span>\n<!-- // 2 The whole slider bar -->\n<span ngxSliderElement #fullBar [class.ngx-slider-transparent]=\"fullBarTransparentClass\" class=\"ngx-slider-span ngx-slider-bar-wrapper ngx-slider-full-bar\">\n  <span class=\"ngx-slider-span ngx-slider-bar\"></span>\n</span>\n<!-- // 3 Selection bar between two handles -->\n<span ngxSliderElement #selectionBar [class.ngx-slider-draggable]=\"selectionBarDraggableClass\" class=\"ngx-slider-span ngx-slider-bar-wrapper ngx-slider-selection-bar\">\n  <span class=\"ngx-slider-span ngx-slider-bar ngx-slider-selection\" [ngStyle]=\"barStyle\"></span>\n</span>\n<!-- // 4 Low slider handle -->\n<span ngxSliderHandle #minHandle class=\"ngx-slider-span ngx-slider-pointer ngx-slider-pointer-min\" [ngStyle]=minPointerStyle></span>\n<!-- // 5 High slider handle -->\n<span ngxSliderHandle #maxHandle [style.display]=\"range ? 'inherit' : 'none'\" class=\"ngx-slider-span ngx-slider-pointer ngx-slider-pointer-max\" [ngStyle]=maxPointerStyle></span>\n<!-- // 6 Floor label -->\n<span ngxSliderLabel #floorLabel class=\"ngx-slider-span ngx-slider-bubble ngx-slider-limit ngx-slider-floor\"></span>\n<!-- // 7 Ceiling label -->\n<span ngxSliderLabel #ceilLabel class=\"ngx-slider-span ngx-slider-bubble ngx-slider-limit ngx-slider-ceil\"></span>\n<!-- // 8 Label above the low slider handle -->\n<span ngxSliderLabel #minHandleLabel class=\"ngx-slider-span ngx-slider-bubble ngx-slider-model-value\"></span>\n<!-- // 9 Label above the high slider handle -->\n<span ngxSliderLabel #maxHandleLabel class=\"ngx-slider-span ngx-slider-bubble ngx-slider-model-high\"></span>\n<!-- // 10 Combined range label when the slider handles are close ex. 15 - 17 -->\n<span ngxSliderLabel #combinedLabel class=\"ngx-slider-span ngx-slider-bubble ngx-slider-combined\"></span>\n<!-- // 11 The ticks -->\n<span ngxSliderElement #ticksElement [hidden]=\"!showTicks\" [class.ngx-slider-ticks-values-under]=\"ticksUnderValuesClass\" class=\"ngx-slider-ticks\">\n  <span *ngFor=\"let t of ticks\" class=\"ngx-slider-tick\" [ngClass]=\"{'ngx-slider-selected': t.selected}\" [ngStyle]=\"t.style\">\n    <ngx-slider-tooltip-wrapper [template]=\"tooltipTemplate\" [tooltip]=\"t.tooltip\" [placement]=\"t.tooltipPlacement\"></ngx-slider-tooltip-wrapper>\n    <ngx-slider-tooltip-wrapper *ngIf=\"t.value != null\" class=\"ngx-slider-span ngx-slider-tick-value\"\n        [template]=\"tooltipTemplate\" [tooltip]=\"t.valueTooltip\" [placement]=\"t.valueTooltipPlacement\" [content]=\"t.value\"></ngx-slider-tooltip-wrapper>\n    <span *ngIf=\"t.legend != null\" class=\"ngx-slider-span ngx-slider-tick-legend\" [innerHTML]=\"t.legend\"></span>\n  </span>\n</span>`,\n  styles: [`::ng-deep .ngx-slider{display:inline-block;position:relative;height:4px;width:100%;margin:35px 0 15px;vertical-align:middle;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;touch-action:pan-y}::ng-deep .ngx-slider.with-legend{margin-bottom:40px}::ng-deep .ngx-slider[disabled]{cursor:not-allowed}::ng-deep .ngx-slider[disabled] .ngx-slider-pointer{cursor:not-allowed;background-color:#d8e0f3}::ng-deep .ngx-slider[disabled] .ngx-slider-draggable{cursor:not-allowed}::ng-deep .ngx-slider[disabled] .ngx-slider-selection{background:#8b91a2}::ng-deep .ngx-slider[disabled] .ngx-slider-tick{cursor:not-allowed}::ng-deep .ngx-slider[disabled] .ngx-slider-tick.ngx-slider-selected{background:#8b91a2}::ng-deep .ngx-slider .ngx-slider-span{white-space:nowrap;position:absolute;display:inline-block}::ng-deep .ngx-slider .ngx-slider-base{width:100%;height:100%;padding:0}::ng-deep .ngx-slider .ngx-slider-bar-wrapper{left:0;box-sizing:border-box;margin-top:-16px;padding-top:16px;width:100%;height:32px;z-index:1}::ng-deep .ngx-slider .ngx-slider-draggable{cursor:move}::ng-deep .ngx-slider .ngx-slider-bar{left:0;width:100%;height:4px;z-index:1;background:#d8e0f3;border-radius:2px}::ng-deep .ngx-slider .ngx-slider-bar-wrapper.ngx-slider-transparent .ngx-slider-bar{background:0 0}::ng-deep .ngx-slider .ngx-slider-bar-wrapper.ngx-slider-left-out-selection .ngx-slider-bar{background:#df002d}::ng-deep .ngx-slider .ngx-slider-bar-wrapper.ngx-slider-right-out-selection .ngx-slider-bar{background:#03a688}::ng-deep .ngx-slider .ngx-slider-selection{z-index:2;background:#0db9f0;border-radius:2px}::ng-deep .ngx-slider .ngx-slider-pointer{cursor:pointer;width:32px;height:32px;top:-14px;background-color:#0db9f0;z-index:3;border-radius:16px}::ng-deep .ngx-slider .ngx-slider-pointer:after{content:'';width:8px;height:8px;position:absolute;top:12px;left:12px;border-radius:4px;background:#fff}::ng-deep .ngx-slider .ngx-slider-pointer:hover:after{background-color:#fff}::ng-deep .ngx-slider .ngx-slider-pointer.ngx-slider-active{z-index:4}::ng-deep .ngx-slider .ngx-slider-pointer.ngx-slider-active:after{background-color:#451aff}::ng-deep .ngx-slider .ngx-slider-bubble{cursor:default;bottom:16px;padding:1px 3px;color:#55637d;font-size:16px}::ng-deep .ngx-slider .ngx-slider-bubble.ngx-slider-limit{color:#55637d}::ng-deep .ngx-slider .ngx-slider-ticks{box-sizing:border-box;width:100%;height:0;position:absolute;left:0;top:-3px;margin:0;z-index:1;list-style:none}::ng-deep .ngx-slider .ngx-slider-ticks-values-under .ngx-slider-tick-value{top:auto;bottom:-36px}::ng-deep .ngx-slider .ngx-slider-tick{text-align:center;cursor:pointer;width:10px;height:10px;background:#d8e0f3;border-radius:50%;position:absolute;top:0;left:0;margin-left:11px}::ng-deep .ngx-slider .ngx-slider-tick.ngx-slider-selected{background:#0db9f0}::ng-deep .ngx-slider .ngx-slider-tick-value{position:absolute;top:-34px;-webkit-transform:translate(-50%,0);transform:translate(-50%,0)}::ng-deep .ngx-slider .ngx-slider-tick-legend{position:absolute;top:24px;-webkit-transform:translate(-50%,0);transform:translate(-50%,0);max-width:50px;white-space:normal}::ng-deep .ngx-slider.vertical{position:relative;width:4px;height:100%;margin:0 20px;padding:0;vertical-align:baseline;touch-action:pan-x}::ng-deep .ngx-slider.vertical .ngx-slider-base{width:100%;height:100%;padding:0}::ng-deep .ngx-slider.vertical .ngx-slider-bar-wrapper{top:auto;left:0;margin:0 0 0 -16px;padding:0 0 0 16px;height:100%;width:32px}::ng-deep .ngx-slider.vertical .ngx-slider-bar{bottom:0;left:auto;width:4px;height:100%}::ng-deep .ngx-slider.vertical .ngx-slider-pointer{left:-14px!important;top:auto;bottom:0}::ng-deep .ngx-slider.vertical .ngx-slider-bubble{left:16px!important;bottom:0}::ng-deep .ngx-slider.vertical .ngx-slider-ticks{height:100%;width:0;left:-3px;top:0;z-index:1}::ng-deep .ngx-slider.vertical .ngx-slider-tick{vertical-align:middle;margin-left:auto;margin-top:11px}::ng-deep .ngx-slider.vertical .ngx-slider-tick-value{left:24px;top:auto;-webkit-transform:translate(0,-28%);transform:translate(0,-28%)}::ng-deep .ngx-slider.vertical .ngx-slider-tick-legend{top:auto;right:24px;-webkit-transform:translate(0,-28%);transform:translate(0,-28%);max-width:none;white-space:nowrap}::ng-deep .ngx-slider.vertical .ngx-slider-ticks-values-under .ngx-slider-tick-value{bottom:auto;left:auto;right:24px}::ng-deep .ngx-slider *{transition:none}::ng-deep .ngx-slider.animate .ngx-slider-bar-wrapper{transition:.3s linear}::ng-deep .ngx-slider.animate .ngx-slider-selection{transition:background-color .3s linear}::ng-deep .ngx-slider.animate .ngx-slider-pointer{transition:.3s linear}::ng-deep .ngx-slider.animate .ngx-slider-bubble{transition:.3s linear}::ng-deep .ngx-slider.animate .ngx-slider-bubble.ngx-slider-limit{transition:opacity .3s linear}::ng-deep .ngx-slider.animate .ngx-slider-bubble.ngx-slider-combined{transition:opacity .3s linear}::ng-deep .ngx-slider.animate .ngx-slider-tick{transition:background-color .3s linear}`],\n  host: { class: 'ngx-slider' },\n  providers: [NGX_SLIDER_CONTROL_VALUE_ACCESSOR]\n})\nexport class SliderComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy, ControlValueAccessor {\n  // Model for low value of slider. For simple slider, this is the only input. For range slider, this is the low value.\n  @Input()\n  public value: number = null;\n  // Output for low value slider to support two-way bindings\n  @Output()\n  public valueChange: EventEmitter<number> = new EventEmitter();\n\n  // Model for high value of slider. Not used in simple slider. For range slider, this is the high value.\n  @Input()\n  public highValue: number = null;\n  // Output for high value slider to support two-way bindings\n  @Output()\n  public highValueChange: EventEmitter<number> = new EventEmitter();\n\n  // An object with all the other options of the slider.\n  // Each option can be updated at runtime and the slider will automatically be re-rendered.\n  @Input()\n  public options: Options = new Options();\n\n  // Event emitted when user starts interaction with the slider\n  @Output()\n  public userChangeStart: EventEmitter<ChangeContext> = new EventEmitter();\n\n  // Event emitted on each change coming from user interaction\n  @Output()\n  public userChange: EventEmitter<ChangeContext> = new EventEmitter();\n\n  // Event emitted when user finishes interaction with the slider\n  @Output()\n  public userChangeEnd: EventEmitter<ChangeContext> = new EventEmitter();\n\n  private manualRefreshSubscription: any;\n  // Input event that triggers slider refresh (re-positioning of slider elements)\n  @Input() set manualRefresh(manualRefresh: EventEmitter<void>) {\n    this.unsubscribeManualRefresh();\n\n    this.manualRefreshSubscription = manualRefresh.subscribe(() => {\n      setTimeout(() => this.calculateViewDimensionsAndDetectChanges());\n    });\n  }\n\n  private triggerFocusSubscription: any;\n  // Input event that triggers setting focus on given slider handle\n  @Input() set triggerFocus(triggerFocus: EventEmitter<void>) {\n    this.unsubscribeTriggerFocus();\n\n    this.triggerFocusSubscription = triggerFocus.subscribe((pointerType: PointerType) => {\n      this.focusPointer(pointerType);\n    });\n  }\n\n  // Slider type, true means range slider\n  public get range(): boolean {\n    return !ValueHelper.isNullOrUndefined(this.value) && !ValueHelper.isNullOrUndefined(this.highValue);\n  }\n\n  // Set to true if init method already executed\n  private initHasRun: boolean = false;\n\n  // Changes in model inputs are passed through this subject\n  // These are all changes coming in from outside the component through input bindings or reactive form inputs\n  private inputModelChangeSubject: Subject<InputModelChange> = new Subject<InputModelChange>();\n  private inputModelChangeSubscription: Subscription = null;\n\n  // Changes to model outputs are passed through this subject\n  // These are all changes that need to be communicated to output emitters and registered callbacks\n  private outputModelChangeSubject: Subject<OutputModelChange> = new Subject<OutputModelChange>();\n  private outputModelChangeSubscription: Subscription = null;\n\n  // Low value synced to model low value\n  private viewLowValue: number = null;\n  // High value synced to model high value\n  private viewHighValue: number = null;\n  // Options synced to model options, based on defaults\n  private viewOptions: Options = new Options();\n\n  // Half of the width or height of the slider handles\n  private handleHalfDimension: number = 0;\n  // Maximum position the slider handle can have\n  private maxHandlePosition: number = 0;\n\n  // Which handle is currently tracked for move events\n  private currentTrackingPointer: PointerType = null;\n  // Internal variable to keep track of the focus element\n  private currentFocusPointer: PointerType = null;\n  // Used to call onStart on the first keydown event\n  private firstKeyDown: boolean = false;\n  // Current touch id of touch event being handled\n  private touchId: number = null;\n  // Values recorded when first dragging the bar\n  private dragging: Dragging = new Dragging();\n\n  /* Slider DOM elements */\n\n  // Left selection bar outside two handles\n  @ViewChild('leftOuterSelectionBar', {read: SliderElementDirective})\n  private leftOuterSelectionBarElement: SliderElementDirective;\n\n  // Right selection bar outside two handles\n  @ViewChild('rightOuterSelectionBar', {read: SliderElementDirective})\n  private rightOuterSelectionBarElement: SliderElementDirective;\n\n  // The whole slider bar\n  @ViewChild('fullBar', {read: SliderElementDirective})\n  private fullBarElement: SliderElementDirective;\n\n  // Highlight between two handles\n  @ViewChild('selectionBar', {read: SliderElementDirective})\n  private selectionBarElement: SliderElementDirective;\n\n  // Left slider handle\n  @ViewChild('minHandle', {read: SliderHandleDirective})\n  private minHandleElement: SliderHandleDirective;\n\n  // Right slider handle\n  @ViewChild('maxHandle', {read: SliderHandleDirective})\n  private maxHandleElement: SliderHandleDirective;\n\n  // Floor label\n  @ViewChild('floorLabel', {read: SliderLabelDirective})\n  private floorLabelElement: SliderLabelDirective;\n\n  // Ceiling label\n  @ViewChild('ceilLabel', {read: SliderLabelDirective})\n  private ceilLabelElement: SliderLabelDirective;\n\n  // Label above the low value\n  @ViewChild('minHandleLabel', {read: SliderLabelDirective})\n  private minHandleLabelElement: SliderLabelDirective;\n\n  // Label above the high value\n  @ViewChild('maxHandleLabel', {read: SliderLabelDirective})\n  private maxHandleLabelElement: SliderLabelDirective;\n\n  // Combined label\n  @ViewChild('combinedLabel', {read: SliderLabelDirective})\n  private combinedLabelElement: SliderLabelDirective;\n\n  // The ticks\n  @ViewChild('ticksElement', {read: SliderElementDirective})\n  private ticksElement: SliderElementDirective;\n\n  // Optional custom template for displaying tooltips\n  @ContentChild('tooltipTemplate')\n  public tooltipTemplate: TemplateRef<any>;\n\n  // Host element class bindings\n  @HostBinding('class.vertical')\n  public sliderElementVerticalClass: boolean = false;\n  @HostBinding('class.animate')\n  public sliderElementAnimateClass: boolean = false;\n  @HostBinding('class.with-legend')\n  public sliderElementWithLegendClass: boolean = false;\n  @HostBinding('attr.disabled')\n  public sliderElementDisabledAttr: string = null;\n\n  // CSS styles and class flags\n  public barStyle: any = {};\n  public minPointerStyle: any = {};\n  public maxPointerStyle: any = {};\n  public fullBarTransparentClass: boolean = false;\n  public selectionBarDraggableClass: boolean = false;\n  public ticksUnderValuesClass: boolean = false;\n\n  // Whether to show/hide ticks\n  public get showTicks(): boolean {\n    return this.viewOptions.showTicks;\n  }\n\n  /* If tickStep is set or ticksArray is specified.\n     In this case, ticks values should be displayed below the slider. */\n  private intermediateTicks: boolean = false;\n  // Ticks array as displayed in view\n  public ticks: Tick[] = [];\n\n  // Event listeners\n  private eventListenerHelper: EventListenerHelper = null;\n  private onMoveEventListener: EventListener = null;\n  private onEndEventListener: EventListener = null;\n  // Whether currently moving the slider (between onStart() and onEnd())\n  private moving: boolean = false;\n\n  // Observer for slider element resize events\n  private resizeObserver: ResizeObserver = null;\n\n  // Callbacks for reactive forms support\n  private onTouchedCallback: (value: any) => void = null;\n  private onChangeCallback: (value: any) => void = null;\n\n\n  public constructor(private renderer: Renderer2,\n              private elementRef: ElementRef,\n              private changeDetectionRef: ChangeDetectorRef,\n              private zone: NgZone) {\n    this.eventListenerHelper = new EventListenerHelper(this.renderer);\n  }\n\n  // OnInit interface\n  public ngOnInit(): void {\n    this.viewOptions = new Options();\n    Object.assign(this.viewOptions, this.options);\n\n    // We need to run these two things first, before the rest of the init in ngAfterViewInit(),\n    // because these two settings are set through @HostBinding and Angular change detection\n    // mechanism doesn't like them changing in ngAfterViewInit()\n    this.updateDisabledState();\n    this.updateVerticalState();\n  }\n\n  // AfterViewInit interface\n  public ngAfterViewInit(): void {\n    this.applyOptions();\n\n    this.subscribeInputModelChangeSubject(this.viewOptions.inputEventsInterval);\n    this.subscribeOutputModelChangeSubject(this.viewOptions.outputEventsInterval);\n\n    // Once we apply options, we need to normalise model values for the first time\n    this.renormaliseModelValues();\n\n    this.viewLowValue = this.modelValueToViewValue(this.value);\n    if (this.range) {\n      this.viewHighValue = this.modelValueToViewValue(this.highValue);\n    } else {\n      this.viewHighValue = null;\n    }\n\n    this.updateVerticalState(); // need to run this again to cover changes to slider elements\n    this.manageElementsStyle();\n    this.updateDisabledState();\n    this.calculateViewDimensions();\n    this.addAccessibility();\n    this.updateCeilLabel();\n    this.updateFloorLabel();\n    this.initHandles();\n    this.manageEventsBindings();\n\n    this.subscribeResizeObserver();\n\n    this.initHasRun = true;\n\n    // Run change detection manually to resolve some issues when init procedure changes values used in the view\n    if (!this.isRefDestroyed()) {\n      this.changeDetectionRef.detectChanges();\n    }\n  }\n\n  // OnChanges interface\n  public ngOnChanges(changes: SimpleChanges): void {\n    // Always apply options first\n    if (!ValueHelper.isNullOrUndefined(changes.options)) {\n      this.onChangeOptions();\n    }\n\n    // Then value changes\n    if (!ValueHelper.isNullOrUndefined(changes.value) ||\n        !ValueHelper.isNullOrUndefined(changes.highValue)) {\n      this.inputModelChangeSubject.next({\n        value: this.value,\n        highValue: this.highValue,\n        forceChange: false,\n        internalChange: false\n      });\n    }\n  }\n\n  // OnDestroy interface\n  public ngOnDestroy(): void {\n    this.unbindEvents();\n\n    this.unsubscribeResizeObserver();\n    this.unsubscribeInputModelChangeSubject();\n    this.unsubscribeOutputModelChangeSubject();\n    this.unsubscribeManualRefresh();\n    this.unsubscribeTriggerFocus();\n  }\n\n  // ControlValueAccessor interface\n  public writeValue(obj: any): void {\n    if (obj instanceof Array) {\n      this.value = obj[0];\n      this.highValue = obj[1];\n    } else {\n      this.value = obj;\n    }\n\n    // ngOnChanges() is not called in this instance, so we need to communicate the change manually\n    this.inputModelChangeSubject.next({\n      value: this.value,\n      highValue: this.highValue,\n      forceChange: false,\n      internalChange: false\n    });\n  }\n\n  // ControlValueAccessor interface\n  public registerOnChange(onChangeCallback: any): void {\n    this.onChangeCallback = onChangeCallback;\n  }\n\n  // ControlValueAccessor interface\n  public registerOnTouched(onTouchedCallback: any): void {\n    this.onTouchedCallback = onTouchedCallback;\n  }\n\n  // ControlValueAccessor interface\n  public setDisabledState(isDisabled: boolean): void {\n    this.viewOptions.disabled = isDisabled;\n    this.updateDisabledState();\n  }\n\n  @HostListener('window:resize', ['$event'])\n  public onResize(event: any): void {\n    this.calculateViewDimensionsAndDetectChanges();\n  }\n\n  private subscribeInputModelChangeSubject(interval?: number): void {\n    this.inputModelChangeSubscription = this.inputModelChangeSubject\n    .pipe(\n      distinctUntilChanged(ModelChange.compare),\n      // Hack to reset the status of the distinctUntilChanged() - if a \"fake\" event comes through with forceChange=true,\n      // we forcefully by-pass distinctUntilChanged(), but otherwise drop the event\n      filter((modelChange: InputModelChange) => !modelChange.forceChange && !modelChange.internalChange),\n      (!ValueHelper.isNullOrUndefined(interval))\n          ? throttleTime(interval, undefined, { leading: true, trailing: true})\n          : tap(() => {}) // no-op\n    )\n    .subscribe((modelChange: InputModelChange) => this.applyInputModelChange(modelChange));\n  }\n\n  private subscribeOutputModelChangeSubject(interval?: number): void {\n    this.outputModelChangeSubscription = this.outputModelChangeSubject\n      .pipe(\n        distinctUntilChanged(ModelChange.compare),\n        (!ValueHelper.isNullOrUndefined(interval))\n          ? throttleTime(interval, undefined, { leading: true, trailing: true})\n          : tap(() => {}) // no-op\n      )\n      .subscribe((modelChange: OutputModelChange) => this.publishOutputModelChange(modelChange));\n  }\n\n  private subscribeResizeObserver(): void {\n    if (CompatibilityHelper.isResizeObserverAvailable()) {\n      this.resizeObserver = new ResizeObserver((): void => this.calculateViewDimensionsAndDetectChanges());\n      this.resizeObserver.observe(this.elementRef.nativeElement);\n    }\n  }\n\n  private unsubscribeResizeObserver(): void {\n    if (CompatibilityHelper.isResizeObserverAvailable() && this.resizeObserver !== null) {\n      this.resizeObserver.disconnect();\n      this.resizeObserver = null;\n    }\n  }\n\n  private unsubscribeOnMove(): void {\n    if (!ValueHelper.isNullOrUndefined(this.onMoveEventListener)) {\n      this.eventListenerHelper.detachEventListener(this.onMoveEventListener);\n      this.onMoveEventListener = null;\n    }\n  }\n\n  private unsubscribeOnEnd(): void {\n    if (!ValueHelper.isNullOrUndefined(this.onEndEventListener)) {\n      this.eventListenerHelper.detachEventListener(this.onEndEventListener);\n      this.onEndEventListener = null;\n    }\n  }\n\n  private unsubscribeInputModelChangeSubject(): void {\n    if (!ValueHelper.isNullOrUndefined(this.inputModelChangeSubscription)) {\n      this.inputModelChangeSubscription.unsubscribe();\n      this.inputModelChangeSubscription = null;\n    }\n  }\n\n  private unsubscribeOutputModelChangeSubject(): void {\n    if (!ValueHelper.isNullOrUndefined(this.outputModelChangeSubscription)) {\n      this.outputModelChangeSubscription.unsubscribe();\n      this.outputModelChangeSubscription = null;\n    }\n  }\n\n  private unsubscribeManualRefresh(): void {\n    if (!ValueHelper.isNullOrUndefined(this.manualRefreshSubscription)) {\n      this.manualRefreshSubscription.unsubscribe();\n      this.manualRefreshSubscription = null;\n    }\n  }\n\n  private unsubscribeTriggerFocus(): void {\n    if (!ValueHelper.isNullOrUndefined(this.triggerFocusSubscription)) {\n      this.triggerFocusSubscription.unsubscribe();\n      this.triggerFocusSubscription = null;\n    }\n  }\n\n  private getPointerElement(pointerType: PointerType): SliderHandleDirective {\n    if (pointerType === PointerType.Min) {\n      return this.minHandleElement;\n    } else if (pointerType === PointerType.Max) {\n      return this.maxHandleElement;\n    }\n    return null;\n  }\n\n  private getCurrentTrackingValue(): number {\n    if (this.currentTrackingPointer === PointerType.Min) {\n      return this.viewLowValue;\n    } else if (this.currentTrackingPointer === PointerType.Max) {\n      return this.viewHighValue;\n    }\n    return null;\n  }\n\n  private modelValueToViewValue(modelValue: number): number {\n    if (ValueHelper.isNullOrUndefined(modelValue)) {\n      return NaN;\n    }\n\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray) && !this.viewOptions.bindIndexForStepsArray) {\n      return ValueHelper.findStepIndex(+modelValue, this.viewOptions.stepsArray);\n    }\n    return +modelValue;\n  }\n\n  private viewValueToModelValue(viewValue: number): number {\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray) && !this.viewOptions.bindIndexForStepsArray) {\n      return this.getStepValue(viewValue);\n    }\n    return viewValue;\n  }\n\n  private getStepValue(sliderValue: number): number {\n    const step: CustomStepDefinition = this.viewOptions.stepsArray[sliderValue];\n    return (!ValueHelper.isNullOrUndefined(step)) ? step.value : NaN;\n  }\n\n  private applyViewChange(): void {\n    this.value = this.viewValueToModelValue(this.viewLowValue);\n    if (this.range) {\n      this.highValue = this.viewValueToModelValue(this.viewHighValue);\n    }\n\n    this.outputModelChangeSubject.next({\n      value: this.value,\n      highValue: this.highValue,\n      userEventInitiated: true,\n      forceChange: false\n    });\n\n    // At this point all changes are applied and outputs are emitted, so we should be done.\n    // However, input changes are communicated in different stream and we need to be ready to\n    // act on the next input change even if it is exactly the same as last input change.\n    // Therefore, we send a special event to reset the stream.\n    this.inputModelChangeSubject.next({\n      value: this.value,\n      highValue: this.highValue,\n      forceChange: false,\n      internalChange: true\n    });\n  }\n\n  // Apply model change to the slider view\n  private applyInputModelChange(modelChange: InputModelChange): void {\n    const normalisedModelChange: ModelValues = this.normaliseModelValues(modelChange);\n\n    // If normalised model change is different, apply the change to the model values\n    const normalisationChange: boolean = !ModelValues.compare(modelChange, normalisedModelChange);\n    if (normalisationChange) {\n      this.value = normalisedModelChange.value;\n      this.highValue = normalisedModelChange.highValue;\n    }\n\n    this.viewLowValue = this.modelValueToViewValue(normalisedModelChange.value);\n    if (this.range) {\n      this.viewHighValue = this.modelValueToViewValue(normalisedModelChange.highValue);\n    } else {\n      this.viewHighValue = null;\n    }\n\n    this.updateLowHandle(this.valueToPosition(this.viewLowValue));\n    if (this.range) {\n      this.updateHighHandle(this.valueToPosition(this.viewHighValue));\n    }\n    this.updateSelectionBar();\n    this.updateTicksScale();\n    this.updateAriaAttributes();\n    if (this.range) {\n      this.updateCombinedLabel();\n    }\n\n    // At the end, we need to communicate the model change to the outputs as well\n    // Normalisation changes are also always forced out to ensure that subscribers always end up in correct state\n    this.outputModelChangeSubject.next({\n      value: normalisedModelChange.value,\n      highValue: normalisedModelChange.highValue,\n      forceChange: normalisationChange,\n      userEventInitiated: false\n    });\n  }\n\n  // Publish model change to output event emitters and registered callbacks\n  private publishOutputModelChange(modelChange: OutputModelChange): void {\n    const emitOutputs: () => void = (): void => {\n      this.valueChange.emit(modelChange.value);\n      if (this.range) {\n        this.highValueChange.emit(modelChange.highValue);\n      }\n\n      if (!ValueHelper.isNullOrUndefined(this.onChangeCallback)) {\n        if (this.range) {\n          this.onChangeCallback([modelChange.value, modelChange.highValue]);\n        } else {\n          this.onChangeCallback(modelChange.value);\n        }\n      }\n      if (!ValueHelper.isNullOrUndefined(this.onTouchedCallback)) {\n        if (this.range) {\n          this.onTouchedCallback([modelChange.value, modelChange.highValue]);\n        } else {\n          this.onTouchedCallback(modelChange.value);\n        }\n      }\n    };\n\n    if (modelChange.userEventInitiated) {\n      // If this change was initiated by a user event, we can emit outputs in the same tick\n      emitOutputs();\n      this.userChange.emit(this.getChangeContext());\n    } else {\n      // But, if the change was initated by something else like a change in input bindings,\n      // we need to wait until next tick to emit the outputs to keep Angular change detection happy\n      setTimeout(() => { emitOutputs(); });\n    }\n  }\n\n  private normaliseModelValues(input: ModelValues): ModelValues {\n    const normalisedInput: ModelValues = new ModelValues();\n    normalisedInput.value = input.value;\n    normalisedInput.highValue = input.highValue;\n\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray)) {\n      // When using steps array, only round to nearest step in the array\n      // No other enforcement can be done, as the step array may be out of order, and that is perfectly fine\n      if (this.viewOptions.enforceStepsArray) {\n        const valueIndex: number = ValueHelper.findStepIndex(normalisedInput.value, this.viewOptions.stepsArray);\n        normalisedInput.value = this.viewOptions.stepsArray[valueIndex].value;\n\n        if (this.range) {\n          const highValueIndex: number = ValueHelper.findStepIndex(normalisedInput.highValue, this.viewOptions.stepsArray);\n          normalisedInput.highValue = this.viewOptions.stepsArray[highValueIndex].value;\n        }\n      }\n\n      return normalisedInput;\n    }\n\n    if (this.viewOptions.enforceStep) {\n      normalisedInput.value = this.roundStep(normalisedInput.value);\n      if (this.range) {\n        normalisedInput.highValue = this.roundStep(normalisedInput.highValue);\n      }\n    }\n\n    if (this.viewOptions.enforceRange) {\n      normalisedInput.value = MathHelper.clampToRange(normalisedInput.value, this.viewOptions.floor, this.viewOptions.ceil);\n\n      if (this.range) {\n        normalisedInput.highValue = MathHelper.clampToRange(normalisedInput.highValue, this.viewOptions.floor, this.viewOptions.ceil);\n      }\n\n      // Make sure that range slider invariant (value <= highValue) is always satisfied\n      if (this.range && input.value > input.highValue) {\n        // We know that both values are now clamped correctly, they may just be in the wrong order\n        // So the easy solution is to swap them... except swapping is sometimes disabled in options, so we make the two values the same\n        if (this.viewOptions.noSwitching) {\n          normalisedInput.value = normalisedInput.highValue;\n        } else {\n          const tempValue: number = input.value;\n          normalisedInput.value = input.highValue;\n          normalisedInput.highValue = tempValue;\n        }\n      }\n    }\n\n    return normalisedInput;\n  }\n\n  private renormaliseModelValues(): void {\n    const previousModelValues: ModelValues = {\n      value: this.value,\n      highValue: this.highValue\n    };\n    const normalisedModelValues: ModelValues = this.normaliseModelValues(previousModelValues);\n    if (!ModelValues.compare(normalisedModelValues, previousModelValues)) {\n      this.value = normalisedModelValues.value;\n      this.highValue = normalisedModelValues.highValue;\n\n      this.outputModelChangeSubject.next({\n        value: this.value,\n        highValue: this.highValue,\n        forceChange: true,\n        userEventInitiated: false\n      });\n    }\n  }\n\n  private onChangeOptions(): void {\n    if (!this.initHasRun) {\n      return;\n    }\n\n    const previousInputEventsInterval: number = this.viewOptions.inputEventsInterval;\n    const previousOutputEventsInterval: number = this.viewOptions.outputEventsInterval;\n\n    const previousOptionsInfluencingEventBindings: boolean[] = this.getOptionsInfluencingEventBindings(this.viewOptions);\n\n    this.applyOptions();\n\n    const newOptionsInfluencingEventBindings: boolean[] = this.getOptionsInfluencingEventBindings(this.viewOptions);\n    // Avoid re-binding events in case nothing changes that can influence it\n    // It makes it possible to change options while dragging the slider\n    const rebindEvents: boolean = !ValueHelper.areArraysEqual(previousOptionsInfluencingEventBindings, newOptionsInfluencingEventBindings);\n\n    if (previousInputEventsInterval !== this.viewOptions.inputEventsInterval) {\n      this.unsubscribeInputModelChangeSubject();\n      this.subscribeInputModelChangeSubject(this.viewOptions.inputEventsInterval);\n    }\n\n    if (previousOutputEventsInterval !== this.viewOptions.outputEventsInterval) {\n      this.unsubscribeInputModelChangeSubject();\n      this.subscribeInputModelChangeSubject(this.viewOptions.outputEventsInterval);\n    }\n\n    // With new options, we need to re-normalise model values if necessary\n    this.renormaliseModelValues();\n\n    this.viewLowValue = this.modelValueToViewValue(this.value);\n    if (this.range) {\n      this.viewHighValue = this.modelValueToViewValue(this.highValue);\n    } else {\n      this.viewHighValue = null;\n    }\n\n    this.resetSlider(rebindEvents);\n  }\n\n  // Read the user options and apply them to the slider model\n  private applyOptions(): void {\n    this.viewOptions = new Options();\n    Object.assign(this.viewOptions, this.options);\n\n    this.viewOptions.draggableRange = this.range && this.viewOptions.draggableRange;\n    this.viewOptions.draggableRangeOnly = this.range && this.viewOptions.draggableRangeOnly;\n    if (this.viewOptions.draggableRangeOnly) {\n      this.viewOptions.draggableRange = true;\n    }\n\n    this.viewOptions.showTicks = this.viewOptions.showTicks ||\n      this.viewOptions.showTicksValues ||\n      !ValueHelper.isNullOrUndefined(this.viewOptions.ticksArray);\n    if (this.viewOptions.showTicks &&\n       (!ValueHelper.isNullOrUndefined(this.viewOptions.tickStep) || !ValueHelper.isNullOrUndefined(this.viewOptions.ticksArray))) {\n      this.intermediateTicks = true;\n    }\n\n    this.viewOptions.showSelectionBar = this.viewOptions.showSelectionBar ||\n      this.viewOptions.showSelectionBarEnd ||\n      !ValueHelper.isNullOrUndefined(this.viewOptions.showSelectionBarFromValue);\n\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray)) {\n      this.applyStepsArrayOptions();\n    } else {\n      this.applyFloorCeilOptions();\n    }\n\n    if (ValueHelper.isNullOrUndefined(this.viewOptions.combineLabels)) {\n      this.viewOptions.combineLabels = (minValue: string, maxValue: string): string => {\n        return minValue + ' - ' + maxValue;\n      };\n    }\n\n    if (this.viewOptions.logScale && this.viewOptions.floor === 0) {\n      throw Error('Can\\'t use floor=0 with logarithmic scale');\n    }\n  }\n\n  private applyStepsArrayOptions(): void {\n    this.viewOptions.floor = 0;\n    this.viewOptions.ceil = this.viewOptions.stepsArray.length - 1;\n    this.viewOptions.step = 1;\n\n    if (ValueHelper.isNullOrUndefined(this.viewOptions.translate)) {\n      this.viewOptions.translate = (modelValue: number): string => {\n        if (this.viewOptions.bindIndexForStepsArray) {\n          return String(this.getStepValue(modelValue));\n        }\n        return String(modelValue);\n      };\n    }\n  }\n\n  private applyFloorCeilOptions(): void {\n    if (ValueHelper.isNullOrUndefined(this.viewOptions.step)) {\n      this.viewOptions.step = 1;\n    } else {\n      this.viewOptions.step = +this.viewOptions.step;\n      if (this.viewOptions.step <= 0) {\n        this.viewOptions.step = 1;\n     }\n    }\n\n    if (ValueHelper.isNullOrUndefined(this.viewOptions.ceil) ||\n        ValueHelper.isNullOrUndefined(this.viewOptions.floor)) {\n      throw Error('floor and ceil options must be supplied');\n    }\n    this.viewOptions.ceil = +this.viewOptions.ceil;\n    this.viewOptions.floor = +this.viewOptions.floor;\n\n    if (ValueHelper.isNullOrUndefined(this.viewOptions.translate)) {\n      this.viewOptions.translate = (value: number): string => String(value);\n    }\n  }\n\n  // Resets slider\n  private resetSlider(rebindEvents: boolean = true): void {\n    this.manageElementsStyle();\n    this.addAccessibility();\n    this.updateCeilLabel();\n    this.updateFloorLabel();\n    if (rebindEvents) {\n      this.unbindEvents();\n      this.manageEventsBindings();\n    }\n    this.updateDisabledState();\n    this.calculateViewDimensions();\n    this.refocusPointerIfNeeded();\n  }\n\n  // Sets focus on the specified pointer\n  private focusPointer(pointerType: PointerType): void {\n    // If not supplied, use min pointer as default\n    if (pointerType !== PointerType.Min && pointerType !== PointerType.Max) {\n      pointerType = PointerType.Min;\n    }\n\n    if (pointerType === PointerType.Min) {\n      this.minHandleElement.focus();\n    } else if (this.range && pointerType === PointerType.Max) {\n      this.maxHandleElement.focus();\n    }\n  }\n\n  private refocusPointerIfNeeded(): void {\n    if (!ValueHelper.isNullOrUndefined(this.currentFocusPointer)) {\n      this.onPointerFocus(this.currentFocusPointer);\n      const element: SliderHandleDirective = this.getPointerElement(this.currentFocusPointer);\n      element.focus();\n    }\n  }\n\n  // Update each elements style based on options\n  private manageElementsStyle(): void {\n    this.updateScale();\n\n    this.floorLabelElement.setAlwaysHide(this.viewOptions.showTicksValues || this.viewOptions.hideLimitLabels);\n    this.ceilLabelElement.setAlwaysHide(this.viewOptions.showTicksValues || this.viewOptions.hideLimitLabels);\n\n    const hideLabelsForTicks: boolean = this.viewOptions.showTicksValues && !this.intermediateTicks;\n    this.minHandleLabelElement.setAlwaysHide(hideLabelsForTicks || this.viewOptions.hidePointerLabels);\n    this.maxHandleLabelElement.setAlwaysHide(hideLabelsForTicks || !this.range || this.viewOptions.hidePointerLabels);\n    this.combinedLabelElement.setAlwaysHide(hideLabelsForTicks || !this.range || this.viewOptions.hidePointerLabels);\n    this.selectionBarElement.setAlwaysHide(!this.range && !this.viewOptions.showSelectionBar);\n    this.leftOuterSelectionBarElement.setAlwaysHide(!this.range || !this.viewOptions.showOuterSelectionBars);\n    this.rightOuterSelectionBarElement.setAlwaysHide(!this.range || !this.viewOptions.showOuterSelectionBars);\n\n    this.fullBarTransparentClass = this.range && this.viewOptions.showOuterSelectionBars;\n    this.selectionBarDraggableClass = this.viewOptions.draggableRange && !this.viewOptions.onlyBindHandles;\n    this.ticksUnderValuesClass = this.intermediateTicks && this.options.showTicksValues;\n\n    if (this.sliderElementVerticalClass !== this.viewOptions.vertical) {\n      this.updateVerticalState();\n      // The above change in host component class will not be applied until the end of this cycle\n      // However, functions calculating the slider position expect the slider to be already styled as vertical\n      // So as a workaround, we need to reset the slider once again to compute the correct values\n      setTimeout((): void => { this.resetSlider(); });\n    }\n\n    // Changing animate class may interfere with slider reset/initialisation, so we should set it separately,\n    // after all is properly set up\n    if (this.sliderElementAnimateClass !== this.viewOptions.animate) {\n      setTimeout((): void => { this.sliderElementAnimateClass = this.viewOptions.animate; });\n    }\n  }\n\n  // Manage the events bindings based on readOnly and disabled options\n  private manageEventsBindings(): void {\n    if (this.viewOptions.disabled || this.viewOptions.readOnly) {\n      this.unbindEvents();\n    } else {\n      this.bindEvents();\n    }\n  }\n\n  // Set the disabled state based on disabled option\n  private updateDisabledState(): void {\n    this.sliderElementDisabledAttr = this.viewOptions.disabled ? 'disabled' : null;\n  }\n\n  // Set vertical state based on vertical option\n  private updateVerticalState(): void {\n    this.sliderElementVerticalClass = this.viewOptions.vertical;\n    for (const element of this.getAllSliderElements()) {\n      // This is also called before ngAfterInit, so need to check that view child bindings work\n      if (!ValueHelper.isNullOrUndefined(element)) {\n        element.setVertical(this.viewOptions.vertical);\n      }\n    }\n  }\n\n  private updateScale(): void {\n    for (const element of this.getAllSliderElements()) {\n      element.setScale(this.viewOptions.scale);\n    }\n  }\n\n  private getAllSliderElements(): SliderElementDirective[] {\n    return [this.leftOuterSelectionBarElement,\n      this.rightOuterSelectionBarElement,\n      this.fullBarElement,\n      this.selectionBarElement,\n      this.minHandleElement,\n      this.maxHandleElement,\n      this.floorLabelElement,\n      this.ceilLabelElement,\n      this.minHandleLabelElement,\n      this.maxHandleLabelElement,\n      this.combinedLabelElement,\n      this.ticksElement\n    ];\n  }\n\n  // Initialize slider handles positions and labels\n  // Run only once during initialization and every time view port changes size\n  private initHandles(): void {\n    this.updateLowHandle(this.valueToPosition(this.viewLowValue));\n\n    /*\n   the order here is important since the selection bar should be\n   updated after the high handle but before the combined label\n   */\n    if (this.range) {\n      this.updateHighHandle(this.valueToPosition(this.viewHighValue));\n    }\n\n    this.updateSelectionBar();\n\n    if (this.range) {\n      this.updateCombinedLabel();\n    }\n\n    this.updateTicksScale();\n  }\n\n  // Adds accessibility attributes, run only once during initialization\n  private addAccessibility(): void {\n    this.updateAriaAttributes();\n\n    this.minHandleElement.role = 'slider';\n\n    if ( this.viewOptions.keyboardSupport &&\n      !(this.viewOptions.readOnly || this.viewOptions.disabled) ) {\n      this.minHandleElement.tabindex = '0';\n    } else {\n      this.minHandleElement.tabindex = '';\n    }\n\n    this.minHandleElement.ariaOrientation = this.viewOptions.vertical ? 'vertical' : 'horizontal';\n\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.ariaLabel)) {\n      this.minHandleElement.ariaLabel = this.viewOptions.ariaLabel;\n    } else if (!ValueHelper.isNullOrUndefined(this.viewOptions.ariaLabelledBy)) {\n      this.minHandleElement.ariaLabelledBy = this.viewOptions.ariaLabelledBy;\n    }\n\n    if (this.range) {\n      this.maxHandleElement.role = 'slider';\n\n      if (this.viewOptions.keyboardSupport &&\n        !(this.viewOptions.readOnly || this.viewOptions.disabled)) {\n        this.maxHandleElement.tabindex = '0';\n      } else {\n        this.maxHandleElement.tabindex = '';\n      }\n\n      this.maxHandleElement.ariaOrientation = this.viewOptions.vertical ? 'vertical' : 'horizontal';\n\n      if (!ValueHelper.isNullOrUndefined(this.viewOptions.ariaLabelHigh)) {\n        this.maxHandleElement.ariaLabel = this.viewOptions.ariaLabelHigh;\n      } else if (!ValueHelper.isNullOrUndefined(this.viewOptions.ariaLabelledByHigh)) {\n        this.maxHandleElement.ariaLabelledBy = this.viewOptions.ariaLabelledByHigh;\n      }\n    }\n  }\n\n  // Updates aria attributes according to current values\n  private updateAriaAttributes(): void {\n    this.minHandleElement.ariaValueNow = (+this.value).toString();\n    this.minHandleElement.ariaValueText = this.viewOptions.translate(+this.value, LabelType.Low);\n    this.minHandleElement.ariaValueMin = this.viewOptions.floor.toString();\n    this.minHandleElement.ariaValueMax = this.viewOptions.ceil.toString();\n\n    if (this.range) {\n      this.maxHandleElement.ariaValueNow = (+this.highValue).toString();\n      this.maxHandleElement.ariaValueText = this.viewOptions.translate(+this.highValue, LabelType.High);\n      this.maxHandleElement.ariaValueMin = this.viewOptions.floor.toString();\n      this.maxHandleElement.ariaValueMax = this.viewOptions.ceil.toString();\n    }\n  }\n\n  // Calculate dimensions that are dependent on view port size\n  // Run once during initialization and every time view port changes size.\n  private calculateViewDimensions(): void {\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.handleDimension)) {\n      this.minHandleElement.setDimension(this.viewOptions.handleDimension);\n    } else {\n      this.minHandleElement.calculateDimension();\n    }\n\n    const handleWidth: number = this.minHandleElement.dimension;\n\n    this.handleHalfDimension = handleWidth / 2;\n\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.barDimension)) {\n      this.fullBarElement.setDimension(this.viewOptions.barDimension);\n    } else {\n      this.fullBarElement.calculateDimension();\n    }\n\n    this.maxHandlePosition = this.fullBarElement.dimension - handleWidth;\n\n    if (this.initHasRun) {\n      this.updateFloorLabel();\n      this.updateCeilLabel();\n      this.initHandles();\n    }\n  }\n\n  private calculateViewDimensionsAndDetectChanges(): void {\n    this.calculateViewDimensions();\n    if (!this.isRefDestroyed()) {\n      this.changeDetectionRef.detectChanges();\n   }\n  }\n\n  /**\n   * If the slider reference is already destroyed\n   * @returns boolean - true if ref is destroyed\n   */\n  private isRefDestroyed(): boolean {\n    return this.changeDetectionRef['destroyed'];\n  }\n\n  // Update the ticks position\n  private updateTicksScale(): void {\n    if (!this.viewOptions.showTicks) {\n      setTimeout(() => { this.sliderElementWithLegendClass = false; });\n      return;\n    }\n\n    const ticksArray: number[] = !ValueHelper.isNullOrUndefined(this.viewOptions.ticksArray)\n      ? this.viewOptions.ticksArray\n      : this.getTicksArray();\n    const translate: string = this.viewOptions.vertical ? 'translateY' : 'translateX';\n\n    if (this.viewOptions.rightToLeft) {\n      ticksArray.reverse();\n    }\n\n    const tickValueStep: number = !ValueHelper.isNullOrUndefined(this.viewOptions.tickValueStep) ? this.viewOptions.tickValueStep :\n        (!ValueHelper.isNullOrUndefined(this.viewOptions.tickStep) ? this.viewOptions.tickStep : this.viewOptions.step);\n\n    let hasAtLeastOneLegend: boolean = false;\n\n    const newTicks: Tick[] = ticksArray.map((value: number): Tick => {\n      let position: number = this.valueToPosition(value);\n\n      if (this.viewOptions.vertical) {\n        position = this.maxHandlePosition - position;\n      }\n\n      const translation: string = translate + '(' + Math.round(position) + 'px)';\n      const tick: Tick = new Tick();\n      tick.selected = this.isTickSelected(value);\n      tick.style = {\n        '-webkit-transform': translation,\n        '-moz-transform': translation,\n        '-o-transform': translation,\n        '-ms-transform': translation,\n        transform: translation,\n      };\n      if (tick.selected && !ValueHelper.isNullOrUndefined(this.viewOptions.getSelectionBarColor)) {\n        tick.style['background-color'] = this.getSelectionBarColor();\n      }\n      if (!tick.selected && !ValueHelper.isNullOrUndefined(this.viewOptions.getTickColor)) {\n        tick.style['background-color'] = this.getTickColor(value);\n      }\n      if (!ValueHelper.isNullOrUndefined(this.viewOptions.ticksTooltip)) {\n        tick.tooltip = this.viewOptions.ticksTooltip(value);\n        tick.tooltipPlacement = this.viewOptions.vertical ? 'right' : 'top';\n      }\n      if (this.viewOptions.showTicksValues && !ValueHelper.isNullOrUndefined(tickValueStep) &&\n          MathHelper.isModuloWithinPrecisionLimit(value, tickValueStep, this.viewOptions.precisionLimit)) {\n        tick.value = this.getDisplayValue(value, LabelType.TickValue);\n        if (!ValueHelper.isNullOrUndefined(this.viewOptions.ticksValuesTooltip)) {\n          tick.valueTooltip = this.viewOptions.ticksValuesTooltip(value);\n          tick.valueTooltipPlacement = this.viewOptions.vertical\n            ? 'right'\n            : 'top';\n        }\n      }\n\n      let legend: string = null;\n      if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray)) {\n        const step: CustomStepDefinition = this.viewOptions.stepsArray[value];\n        if (!ValueHelper.isNullOrUndefined(step)) {\n          legend = step.legend;\n        }\n      } else if (!ValueHelper.isNullOrUndefined(this.viewOptions.getLegend)) {\n        legend = this.viewOptions.getLegend(value);\n      }\n      if (!ValueHelper.isNullOrUndefined(legend)) {\n        tick.legend = legend;\n        hasAtLeastOneLegend = true;\n      }\n\n      return tick;\n    });\n\n    setTimeout(() => { this.sliderElementWithLegendClass = hasAtLeastOneLegend; });\n\n    // We should avoid re-creating the ticks array if possible\n    // This both improves performance and makes CSS animations work correctly\n    if (!ValueHelper.isNullOrUndefined(this.ticks) && this.ticks.length === newTicks.length) {\n      for (let i: number = 0; i  < newTicks.length; ++i) {\n        Object.assign(this.ticks[i], newTicks[i]);\n      }\n    } else {\n      this.ticks = newTicks;\n    }\n\n    if (!this.isRefDestroyed()) {\n      this.changeDetectionRef.detectChanges();\n    }\n  }\n\n  private getTicksArray(): number[] {\n    const step: number = (!ValueHelper.isNullOrUndefined(this.viewOptions.tickStep)) ? this.viewOptions.tickStep : this.viewOptions.step;\n    const ticksArray: number[] = [];\n\n    const numberOfValues: number = 1 + Math.floor(MathHelper.roundToPrecisionLimit(\n      Math.abs(this.viewOptions.ceil - this.viewOptions.floor) / step,\n      this.viewOptions.precisionLimit\n    ));\n    for (let index: number = 0; index < numberOfValues; ++index) {\n      ticksArray.push(MathHelper.roundToPrecisionLimit(this.viewOptions.floor + step * index, this.viewOptions.precisionLimit));\n    }\n\n    return ticksArray;\n  }\n\n  private isTickSelected(value: number): boolean {\n    if (!this.range) {\n      if (!ValueHelper.isNullOrUndefined(this.viewOptions.showSelectionBarFromValue)) {\n        const center: number = this.viewOptions.showSelectionBarFromValue;\n        if (this.viewLowValue > center &&\n            value >= center &&\n            value <= this.viewLowValue) {\n          return true;\n        } else if (this.viewLowValue < center &&\n                   value <= center &&\n                   value >= this.viewLowValue) {\n          return true;\n        }\n      } else if (this.viewOptions.showSelectionBarEnd) {\n        if (value >= this.viewLowValue) {\n          return true;\n        }\n      } else if (this.viewOptions.showSelectionBar && value <= this.viewLowValue) {\n        return true;\n      }\n    }\n\n    if (this.range && value >= this.viewLowValue && value <= this.viewHighValue) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // Update position of the floor label\n  private updateFloorLabel(): void {\n    if (!this.floorLabelElement.alwaysHide) {\n      this.floorLabelElement.setValue(this.getDisplayValue(this.viewOptions.floor, LabelType.Floor));\n      this.floorLabelElement.calculateDimension();\n      const position: number = this.viewOptions.rightToLeft\n        ? this.fullBarElement.dimension - this.floorLabelElement.dimension\n        : 0;\n      this.floorLabelElement.setPosition(position);\n    }\n  }\n\n  // Update position of the ceiling label\n  private updateCeilLabel(): void {\n    if (!this.ceilLabelElement.alwaysHide) {\n      this.ceilLabelElement.setValue(this.getDisplayValue(this.viewOptions.ceil, LabelType.Ceil));\n      this.ceilLabelElement.calculateDimension();\n      const position: number = this.viewOptions.rightToLeft\n        ? 0\n        : this.fullBarElement.dimension - this.ceilLabelElement.dimension;\n      this.ceilLabelElement.setPosition(position);\n    }\n  }\n\n  // Update slider handles and label positions\n  private updateHandles(which: PointerType, newPos: number): void {\n    if (which === PointerType.Min) {\n      this.updateLowHandle(newPos);\n    } else if (which === PointerType.Max) {\n      this.updateHighHandle(newPos);\n    }\n\n    this.updateSelectionBar();\n    this.updateTicksScale();\n    if (this.range) {\n      this.updateCombinedLabel();\n    }\n  }\n\n  // Helper function to work out the position for handle labels depending on RTL or not\n  private getHandleLabelPos(labelType: PointerType, newPos: number): number {\n    const labelDimension: number = (labelType === PointerType.Min)\n      ? this.minHandleLabelElement.dimension\n      : this.maxHandleLabelElement.dimension;\n    const nearHandlePos: number = newPos - labelDimension / 2 + this.handleHalfDimension;\n    const endOfBarPos: number = this.fullBarElement.dimension - labelDimension;\n\n    if (!this.viewOptions.boundPointerLabels) {\n      return nearHandlePos;\n    }\n\n    if ((this.viewOptions.rightToLeft && labelType === PointerType.Min) ||\n       (!this.viewOptions.rightToLeft && labelType === PointerType.Max)) {\n      return Math.min(nearHandlePos, endOfBarPos);\n    } else {\n      return Math.min(Math.max(nearHandlePos, 0), endOfBarPos);\n    }\n  }\n\n  // Update low slider handle position and label\n  private updateLowHandle(newPos: number): void {\n    this.minHandleElement.setPosition(newPos);\n    this.minHandleLabelElement.setValue(this.getDisplayValue(this.viewLowValue, LabelType.Low));\n    this.minHandleLabelElement.setPosition(this.getHandleLabelPos(PointerType.Min, newPos));\n\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.getPointerColor)) {\n      this.minPointerStyle = {\n        backgroundColor: this.getPointerColor(PointerType.Min),\n      };\n    }\n\n    if (this.viewOptions.autoHideLimitLabels) {\n      this.updateFloorAndCeilLabelsVisibility();\n    }\n  }\n\n  // Update high slider handle position and label\n  private updateHighHandle(newPos: number): void {\n    this.maxHandleElement.setPosition(newPos);\n    this.maxHandleLabelElement.setValue(this.getDisplayValue(this.viewHighValue, LabelType.High));\n    this.maxHandleLabelElement.setPosition(this.getHandleLabelPos(PointerType.Max, newPos));\n\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.getPointerColor)) {\n      this.maxPointerStyle = {\n        backgroundColor: this.getPointerColor(PointerType.Max),\n      };\n    }\n    if (this.viewOptions.autoHideLimitLabels) {\n      this.updateFloorAndCeilLabelsVisibility();\n    }\n  }\n\n  // Show/hide floor/ceiling label\n  private updateFloorAndCeilLabelsVisibility(): void {\n    // Show based only on hideLimitLabels if pointer labels are hidden\n    if (this.viewOptions.hidePointerLabels) {\n      return;\n    }\n    let floorLabelHidden: boolean = false;\n    let ceilLabelHidden: boolean = false;\n    const isMinLabelAtFloor: boolean = this.isLabelBelowFloorLabel(this.minHandleLabelElement);\n    const isMinLabelAtCeil: boolean = this.isLabelAboveCeilLabel(this.minHandleLabelElement);\n    const isMaxLabelAtCeil: boolean = this.isLabelAboveCeilLabel(this.maxHandleLabelElement);\n    const isCombinedLabelAtFloor: boolean = this.isLabelBelowFloorLabel(this.combinedLabelElement);\n    const isCombinedLabelAtCeil: boolean = this.isLabelAboveCeilLabel(this.combinedLabelElement);\n\n    if (isMinLabelAtFloor) {\n      floorLabelHidden = true;\n      this.floorLabelElement.hide();\n    } else {\n      floorLabelHidden = false;\n      this.floorLabelElement.show();\n    }\n\n    if (isMinLabelAtCeil) {\n      ceilLabelHidden = true;\n      this.ceilLabelElement.hide();\n    } else {\n      ceilLabelHidden = false;\n      this.ceilLabelElement.show();\n    }\n\n    if (this.range) {\n      const hideCeil: boolean = this.combinedLabelElement.isVisible() ? isCombinedLabelAtCeil : isMaxLabelAtCeil;\n      const hideFloor: boolean = this.combinedLabelElement.isVisible() ? isCombinedLabelAtFloor : isMinLabelAtFloor;\n\n      if (hideCeil) {\n        this.ceilLabelElement.hide();\n      } else if (!ceilLabelHidden) {\n        this.ceilLabelElement.show();\n      }\n\n      // Hide or show floor label\n      if (hideFloor) {\n        this.floorLabelElement.hide();\n      } else if (!floorLabelHidden) {\n        this.floorLabelElement.show();\n      }\n    }\n  }\n\n  private isLabelBelowFloorLabel(label: SliderLabelDirective): boolean {\n    const pos: number = label.position;\n    const dim: number = label.dimension;\n    const floorPos: number = this.floorLabelElement.position;\n    const floorDim: number = this.floorLabelElement.dimension;\n    return this.viewOptions.rightToLeft\n      ? pos + dim >= floorPos - 2\n      : pos <= floorPos + floorDim + 2;\n  }\n\n  private isLabelAboveCeilLabel(label: SliderLabelDirective): boolean {\n    const pos: number = label.position;\n    const dim: number = label.dimension;\n    const ceilPos: number = this.ceilLabelElement.position;\n    const ceilDim: number = this.ceilLabelElement.dimension;\n    return this.viewOptions.rightToLeft\n      ? pos <= ceilPos + ceilDim + 2\n      : pos + dim >= ceilPos - 2;\n  }\n\n  // Update slider selection bar, combined label and range label\n  private updateSelectionBar(): void {\n    let position: number = 0;\n    let dimension: number = 0;\n    const isSelectionBarFromRight: boolean = this.viewOptions.rightToLeft\n        ? !this.viewOptions.showSelectionBarEnd\n        : this.viewOptions.showSelectionBarEnd;\n    const positionForRange: number = this.viewOptions.rightToLeft\n        ? this.maxHandleElement.position + this.handleHalfDimension\n        : this.minHandleElement.position + this.handleHalfDimension;\n\n    if (this.range) {\n      dimension = Math.abs(this.maxHandleElement.position - this.minHandleElement.position);\n      position = positionForRange;\n    } else {\n      if (!ValueHelper.isNullOrUndefined(this.viewOptions.showSelectionBarFromValue)) {\n        const center: number = this.viewOptions.showSelectionBarFromValue;\n        const centerPosition: number = this.valueToPosition(center);\n        const isModelGreaterThanCenter: boolean = this.viewOptions.rightToLeft\n            ? this.viewLowValue <= center\n            : this.viewLowValue > center;\n        if (isModelGreaterThanCenter) {\n          dimension = this.minHandleElement.position - centerPosition;\n          position = centerPosition + this.handleHalfDimension;\n        } else {\n          dimension = centerPosition - this.minHandleElement.position;\n          position = this.minHandleElement.position + this.handleHalfDimension;\n        }\n      } else if (isSelectionBarFromRight) {\n        dimension = Math.ceil(Math.abs(this.maxHandlePosition - this.minHandleElement.position) + this.handleHalfDimension);\n        position = Math.floor(this.minHandleElement.position + this.handleHalfDimension);\n      } else {\n        dimension = this.minHandleElement.position + this.handleHalfDimension;\n        position = 0;\n      }\n    }\n    this.selectionBarElement.setDimension(dimension);\n    this.selectionBarElement.setPosition(position);\n    if (this.range && this.viewOptions.showOuterSelectionBars) {\n      if (this.viewOptions.rightToLeft) {\n        this.rightOuterSelectionBarElement.setDimension(position);\n        this.rightOuterSelectionBarElement.setPosition(0);\n        this.fullBarElement.calculateDimension();\n        this.leftOuterSelectionBarElement.setDimension(this.fullBarElement.dimension - (position + dimension));\n        this.leftOuterSelectionBarElement.setPosition(position + dimension);\n      } else {\n        this.leftOuterSelectionBarElement.setDimension(position);\n        this.leftOuterSelectionBarElement.setPosition(0);\n        this.fullBarElement.calculateDimension();\n        this.rightOuterSelectionBarElement.setDimension(this.fullBarElement.dimension - (position + dimension));\n        this.rightOuterSelectionBarElement.setPosition(position + dimension);\n      }\n    }\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.getSelectionBarColor)) {\n      const color: string = this.getSelectionBarColor();\n      this.barStyle = {\n        backgroundColor: color,\n      };\n    } else if (!ValueHelper.isNullOrUndefined(this.viewOptions.selectionBarGradient)) {\n      const offset: number = (!ValueHelper.isNullOrUndefined(this.viewOptions.showSelectionBarFromValue))\n            ? this.valueToPosition(this.viewOptions.showSelectionBarFromValue)\n            : 0;\n      const reversed: boolean = (offset - position > 0 && !isSelectionBarFromRight) || (offset - position <= 0 && isSelectionBarFromRight);\n      const direction: string = this.viewOptions.vertical\n          ? reversed ? 'bottom' : 'top'\n          : reversed ? 'left' : 'right';\n      this.barStyle = {\n        backgroundImage:\n          'linear-gradient(to ' +\n          direction +\n          ', ' +\n          this.viewOptions.selectionBarGradient.from +\n          ' 0%,' +\n          this.viewOptions.selectionBarGradient.to +\n          ' 100%)',\n      };\n      if (this.viewOptions.vertical) {\n        this.barStyle.backgroundPosition =\n          'center ' +\n          (offset +\n            dimension +\n            position +\n            (reversed ? -this.handleHalfDimension : 0)) +\n          'px';\n        this.barStyle.backgroundSize =\n          '100% ' + (this.fullBarElement.dimension - this.handleHalfDimension) + 'px';\n      } else {\n        this.barStyle.backgroundPosition =\n          offset -\n          position +\n          (reversed ? this.handleHalfDimension : 0) +\n          'px center';\n        this.barStyle.backgroundSize =\n          this.fullBarElement.dimension - this.handleHalfDimension + 'px 100%';\n      }\n    }\n  }\n\n  // Wrapper around the getSelectionBarColor of the user to pass to correct parameters\n  private getSelectionBarColor(): string {\n    if (this.range) {\n      return this.viewOptions.getSelectionBarColor(\n        this.value,\n        this.highValue\n      );\n    }\n    return this.viewOptions.getSelectionBarColor(this.value);\n  }\n\n  // Wrapper around the getPointerColor of the user to pass to  correct parameters\n  private getPointerColor(pointerType: PointerType): string {\n    if (pointerType === PointerType.Max) {\n      return this.viewOptions.getPointerColor(\n        this.highValue,\n        pointerType\n      );\n    }\n    return this.viewOptions.getPointerColor(\n      this.value,\n      pointerType\n    );\n  }\n\n  // Wrapper around the getTickColor of the user to pass to correct parameters\n  private getTickColor(value: number): string {\n    return this.viewOptions.getTickColor(value);\n  }\n\n  // Update combined label position and value\n  private updateCombinedLabel(): void {\n    let isLabelOverlap: boolean = null;\n    if (this.viewOptions.rightToLeft) {\n      isLabelOverlap =\n        this.minHandleLabelElement.position - this.minHandleLabelElement.dimension - 10 <= this.maxHandleLabelElement.position;\n    } else {\n      isLabelOverlap =\n        this.minHandleLabelElement.position + this.minHandleLabelElement.dimension + 10 >= this.maxHandleLabelElement.position;\n    }\n\n    if (isLabelOverlap) {\n      const lowDisplayValue: string = this.getDisplayValue(this.viewLowValue, LabelType.Low);\n      const highDisplayValue: string = this.getDisplayValue(this.viewHighValue, LabelType.High);\n      const combinedLabelValue: string = this.viewOptions.rightToLeft\n        ? this.viewOptions.combineLabels(highDisplayValue, lowDisplayValue)\n        : this.viewOptions.combineLabels(lowDisplayValue, highDisplayValue);\n\n      this.combinedLabelElement.setValue(combinedLabelValue);\n      const pos: number = this.viewOptions.boundPointerLabels\n        ? Math.min(\n            Math.max(\n              this.selectionBarElement.position +\n                this.selectionBarElement.dimension / 2 -\n                this.combinedLabelElement.dimension / 2,\n              0\n            ),\n            this.fullBarElement.dimension - this.combinedLabelElement.dimension\n          )\n        : this.selectionBarElement.position + this.selectionBarElement.dimension / 2 - this.combinedLabelElement.dimension / 2;\n\n      this.combinedLabelElement.setPosition(pos);\n      this.minHandleLabelElement.hide();\n      this.maxHandleLabelElement.hide();\n      this.combinedLabelElement.show();\n    } else {\n      this.updateHighHandle(this.valueToPosition(this.viewHighValue));\n      this.updateLowHandle(this.valueToPosition(this.viewLowValue));\n      this.maxHandleLabelElement.show();\n      this.minHandleLabelElement.show();\n      this.combinedLabelElement.hide();\n    }\n    if (this.viewOptions.autoHideLimitLabels) {\n      this.updateFloorAndCeilLabelsVisibility();\n    }\n  }\n\n  // Return the translated value if a translate function is provided else the original value\n  private getDisplayValue(value: number, which: LabelType): string {\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray) && !this.viewOptions.bindIndexForStepsArray) {\n      value = this.getStepValue(value);\n    }\n    return this.viewOptions.translate(value, which);\n  }\n\n  // Round value to step and precision based on minValue\n  private roundStep(value: number, customStep?: number): number {\n    const step: number = !ValueHelper.isNullOrUndefined(customStep) ? customStep : this.viewOptions.step;\n    let steppedDifference: number = MathHelper.roundToPrecisionLimit(\n      (value - this.viewOptions.floor) / step, this.viewOptions.precisionLimit);\n    steppedDifference = Math.round(steppedDifference) * step;\n    return MathHelper.roundToPrecisionLimit(this.viewOptions.floor + steppedDifference, this.viewOptions.precisionLimit);\n  }\n\n  // Translate value to pixel position\n  private valueToPosition(val: number): number {\n    let fn: ValueToPositionFunction  = ValueHelper.linearValueToPosition;\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.customValueToPosition)) {\n      fn = this.viewOptions.customValueToPosition;\n    } else if (this.viewOptions.logScale) {\n      fn = ValueHelper.logValueToPosition;\n    }\n\n    val = MathHelper.clampToRange(val, this.viewOptions.floor, this.viewOptions.ceil);\n    let percent: number = fn(val, this.viewOptions.floor, this.viewOptions.ceil);\n    if (ValueHelper.isNullOrUndefined(percent)) {\n      percent = 0;\n    }\n    if (this.viewOptions.rightToLeft) {\n      percent = 1 - percent;\n    }\n    return percent * this.maxHandlePosition;\n  }\n\n  // Translate position to model value\n  private positionToValue(position: number): number {\n    let percent: number = position / this.maxHandlePosition;\n    if (this.viewOptions.rightToLeft) {\n      percent = 1 - percent;\n    }\n    let fn: PositionToValueFunction = ValueHelper.linearPositionToValue;\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.customPositionToValue)) {\n      fn = this.viewOptions.customPositionToValue;\n    } else if (this.viewOptions.logScale) {\n      fn = ValueHelper.logPositionToValue;\n    }\n    const value: number = fn(percent, this.viewOptions.floor, this.viewOptions.ceil);\n    return !ValueHelper.isNullOrUndefined(value) ? value : 0;\n  }\n\n  // Get the X-coordinate or Y-coordinate of an event\n  private getEventXY(event: MouseEvent|TouchEvent, targetTouchId?: number): number {\n    if (event instanceof MouseEvent) {\n      return this.viewOptions.vertical ? event.clientY : event.clientX;\n    }\n\n    let touchIndex: number = 0;\n    const touches: TouchList = event.touches;\n    if (!ValueHelper.isNullOrUndefined(targetTouchId)) {\n      for (let i: number = 0; i < touches.length; i++) {\n        if (touches[i].identifier === targetTouchId) {\n          touchIndex = i;\n          break;\n        }\n      }\n    }\n\n    // Return the target touch or if the target touch was not found in the event\n    // returns the coordinates of the first touch\n    return this.viewOptions.vertical ? touches[touchIndex].clientY : touches[touchIndex].clientX;\n  }\n\n  // Compute the event position depending on whether the slider is horizontal or vertical\n  private getEventPosition(event: MouseEvent|TouchEvent, targetTouchId?: number): number {\n    const sliderElementBoundingRect: ClientRect = this.elementRef.nativeElement.getBoundingClientRect();\n\n    const sliderPos: number = this.viewOptions.vertical ?\n      sliderElementBoundingRect.bottom : sliderElementBoundingRect.left;\n    let eventPos: number = 0;\n    if (this.viewOptions.vertical) {\n      eventPos = -this.getEventXY(event, targetTouchId) + sliderPos;\n    } else {\n      eventPos = this.getEventXY(event, targetTouchId) - sliderPos;\n    }\n    return eventPos * this.viewOptions.scale - this.handleHalfDimension;\n  }\n\n  // Get the handle closest to an event\n  private getNearestHandle(event: MouseEvent|TouchEvent): PointerType {\n    if (!this.range) {\n      return PointerType.Min;\n    }\n\n    const position: number = this.getEventPosition(event);\n    const distanceMin: number = Math.abs(position - this.minHandleElement.position);\n    const distanceMax: number = Math.abs(position - this.maxHandleElement.position);\n\n    if (distanceMin < distanceMax) {\n      return PointerType.Min;\n    } else if (distanceMin > distanceMax) {\n      return PointerType.Max;\n    } else if (!this.viewOptions.rightToLeft) {\n      // if event is at the same distance from min/max then if it's at left of minH, we return minH else maxH\n      return position < this.minHandleElement.position ? PointerType.Min : PointerType.Max;\n    }\n    // reverse in rtl\n    return position > this.minHandleElement.position ? PointerType.Min : PointerType.Max;\n  }\n\n  // Bind mouse and touch events to slider handles\n  private bindEvents(): void {\n    const draggableRange: boolean = this.viewOptions.draggableRange;\n\n    if (!this.viewOptions.onlyBindHandles) {\n      this.selectionBarElement.on('mousedown',\n        (event: MouseEvent): void => this.onBarStart(null, draggableRange, event, true, true, true)\n      );\n    }\n\n    if (this.viewOptions.draggableRangeOnly) {\n      this.minHandleElement.on('mousedown',\n        (event: MouseEvent): void => this.onBarStart(PointerType.Min, draggableRange, event, true, true)\n      );\n      this.maxHandleElement.on('mousedown',\n        (event: MouseEvent): void => this.onBarStart(PointerType.Max, draggableRange, event, true, true)\n      );\n    } else {\n      this.minHandleElement.on('mousedown',\n        (event: MouseEvent): void => this.onStart(PointerType.Min, event, true, true)\n      );\n\n      if (this.range) {\n        this.maxHandleElement.on('mousedown',\n          (event: MouseEvent): void => this.onStart(PointerType.Max, event, true, true)\n        );\n      }\n      if (!this.viewOptions.onlyBindHandles) {\n        this.fullBarElement.on('mousedown',\n          (event: MouseEvent): void => this.onStart(null, event, true, true, true)\n        );\n        this.ticksElement.on('mousedown',\n          (event: MouseEvent): void => this.onStart(null, event, true, true, true, true)\n        );\n      }\n    }\n\n    if (!this.viewOptions.onlyBindHandles) {\n      this.selectionBarElement.onPassive('touchstart',\n        (event: TouchEvent): void => this.onBarStart(null, draggableRange, event, true, true, true)\n      );\n    }\n    if (this.viewOptions.draggableRangeOnly) {\n      this.minHandleElement.onPassive('touchstart',\n        (event: TouchEvent): void => this.onBarStart(PointerType.Min, draggableRange, event, true, true)\n      );\n      this.maxHandleElement.onPassive('touchstart',\n        (event: TouchEvent): void => this.onBarStart(PointerType.Max, draggableRange, event, true, true)\n      );\n    } else {\n      this.minHandleElement.onPassive('touchstart',\n        (event: TouchEvent): void => this.onStart(PointerType.Min, event, true, true)\n      );\n      if (this.range) {\n        this.maxHandleElement.onPassive('touchstart',\n          (event: TouchEvent): void => this.onStart(PointerType.Max, event, true, true)\n        );\n      }\n      if (!this.viewOptions.onlyBindHandles) {\n        this.fullBarElement.onPassive('touchstart',\n          (event: TouchEvent): void => this.onStart(null, event, true, true, true)\n        );\n        this.ticksElement.onPassive('touchstart',\n          (event: TouchEvent): void => this.onStart(null, event, false, false, true, true)\n        );\n      }\n    }\n\n    if (this.viewOptions.keyboardSupport) {\n      this.minHandleElement.on('focus', (): void => this.onPointerFocus(PointerType.Min));\n      if (this.range) {\n        this.maxHandleElement.on('focus', (): void => this.onPointerFocus(PointerType.Max));\n      }\n    }\n  }\n\n  private getOptionsInfluencingEventBindings(options: Options): boolean[] {\n    return [\n      options.disabled,\n      options.readOnly,\n      options.draggableRange,\n      options.draggableRangeOnly,\n      options.onlyBindHandles,\n      options.keyboardSupport\n    ];\n  }\n\n  // Unbind mouse and touch events to slider handles\n  private unbindEvents(): void {\n    this.unsubscribeOnMove();\n    this.unsubscribeOnEnd();\n\n    for (const element of this.getAllSliderElements()) {\n      if (!ValueHelper.isNullOrUndefined(element)) {\n        element.off();\n      }\n    }\n  }\n\n  private onBarStart(pointerType: PointerType, draggableRange: boolean, event: MouseEvent|TouchEvent,\n    bindMove: boolean, bindEnd: boolean, simulateImmediateMove?: boolean, simulateImmediateEnd?: boolean): void {\n    if (draggableRange) {\n      this.onDragStart(pointerType, event, bindMove, bindEnd);\n    } else {\n      this.onStart(pointerType, event, bindMove, bindEnd, simulateImmediateMove, simulateImmediateEnd);\n    }\n  }\n\n  // onStart event handler\n  private onStart(pointerType: PointerType, event: MouseEvent|TouchEvent,\n      bindMove: boolean, bindEnd: boolean, simulateImmediateMove?: boolean, simulateImmediateEnd?: boolean): void {\n    event.stopPropagation();\n    // Only call preventDefault() when handling non-passive events (passive events don't need it)\n    if (!CompatibilityHelper.isTouchEvent(event) || !detectPassiveEvents.hasSupport) {\n      event.preventDefault();\n    }\n\n    this.moving = false;\n\n    // We have to do this in case the HTML where the sliders are on\n    // have been animated into view.\n    this.calculateViewDimensions();\n\n    if (ValueHelper.isNullOrUndefined(pointerType)) {\n      pointerType = this.getNearestHandle(event);\n    }\n\n    this.currentTrackingPointer = pointerType;\n\n    const pointerElement: SliderHandleDirective = this.getPointerElement(pointerType);\n    pointerElement.active = true;\n\n    if (this.viewOptions.keyboardSupport) {\n      pointerElement.focus();\n    }\n\n    if (bindMove) {\n      this.unsubscribeOnMove();\n\n      const onMoveCallback: ((e: MouseEvent|TouchEvent) => void) =\n        (e: MouseEvent|TouchEvent): void => this.dragging.active ? this.onDragMove(e) : this.onMove(e);\n\n      if (CompatibilityHelper.isTouchEvent(event)) {\n        this.onMoveEventListener = this.eventListenerHelper.attachPassiveEventListener(\n          document, 'touchmove', onMoveCallback, this.viewOptions.touchEventsInterval);\n      } else {\n        this.onMoveEventListener = this.eventListenerHelper.attachEventListener(\n          document, 'mousemove', onMoveCallback, this.viewOptions.mouseEventsInterval);\n      }\n    }\n\n    if (bindEnd) {\n      this.unsubscribeOnEnd();\n\n      const onEndCallback: ((e: MouseEvent|TouchEvent) => void) =\n        (e: MouseEvent|TouchEvent): void => this.onEnd(e);\n\n      if (CompatibilityHelper.isTouchEvent(event)) {\n        this.onEndEventListener = this.eventListenerHelper.attachPassiveEventListener(document, 'touchend', onEndCallback);\n      } else {\n        this.onEndEventListener = this.eventListenerHelper.attachEventListener(document, 'mouseup', onEndCallback);\n      }\n    }\n\n    this.userChangeStart.emit(this.getChangeContext());\n\n    if (CompatibilityHelper.isTouchEvent(event) && !ValueHelper.isNullOrUndefined((event as TouchEvent).changedTouches)) {\n      // Store the touch identifier\n      if (ValueHelper.isNullOrUndefined(this.touchId)) {\n        this.touchId = (event as TouchEvent).changedTouches[0].identifier;\n      }\n    }\n\n    // Click events, either with mouse or touch gesture are weird. Sometimes they result in full\n    // start, move, end sequence, and sometimes, they don't - they only invoke mousedown\n    // As a workaround, we simulate the first move event and the end event if it's necessary\n    if (simulateImmediateMove) {\n      this.onMove(event, true);\n    }\n\n    if (simulateImmediateEnd) {\n      this.onEnd(event);\n    }\n  }\n\n  // onMove event handler\n  private onMove(event: MouseEvent|TouchEvent, fromTick?: boolean): void {\n    let touchForThisSlider: Touch = null;\n\n    if (CompatibilityHelper.isTouchEvent(event)) {\n      const changedTouches: TouchList = (event as TouchEvent).changedTouches;\n      for (let i: number = 0; i < changedTouches.length; i++) {\n        if (changedTouches[i].identifier === this.touchId) {\n          touchForThisSlider = changedTouches[i];\n          break;\n        }\n      }\n\n      if (ValueHelper.isNullOrUndefined(touchForThisSlider)) {\n        return;\n      }\n    }\n\n    if (this.viewOptions.animate && !this.viewOptions.animateOnMove) {\n      if (this.moving) {\n        this.sliderElementAnimateClass = false;\n      }\n    }\n\n    this.moving = true;\n\n    const newPos: number = !ValueHelper.isNullOrUndefined(touchForThisSlider)\n      ? this.getEventPosition(event, touchForThisSlider.identifier)\n      : this.getEventPosition(event);\n    let newValue: number;\n    const ceilValue: number = this.viewOptions.rightToLeft\n        ? this.viewOptions.floor\n        : this.viewOptions.ceil;\n    const floorValue: number = this.viewOptions.rightToLeft ? this.viewOptions.ceil : this.viewOptions.floor;\n\n    if (newPos <= 0) {\n      newValue = floorValue;\n    } else if (newPos >= this.maxHandlePosition) {\n      newValue = ceilValue;\n    } else {\n      newValue = this.positionToValue(newPos);\n      if (fromTick && !ValueHelper.isNullOrUndefined(this.viewOptions.tickStep)) {\n        newValue = this.roundStep(newValue, this.viewOptions.tickStep);\n      } else {\n        newValue = this.roundStep(newValue);\n      }\n    }\n    this.positionTrackingHandle(newValue);\n  }\n\n  private onEnd(event: MouseEvent|TouchEvent): void {\n    if (CompatibilityHelper.isTouchEvent(event)) {\n      const changedTouches: TouchList = (event as TouchEvent).changedTouches;\n      if (changedTouches[0].identifier !== this.touchId) {\n        return;\n      }\n    }\n\n    this.moving = false;\n    if (this.viewOptions.animate) {\n      this.sliderElementAnimateClass = true;\n    }\n\n    this.touchId = null;\n\n    if (!this.viewOptions.keyboardSupport) {\n      this.minHandleElement.active = false;\n      this.maxHandleElement.active = false;\n      this.currentTrackingPointer = null;\n    }\n    this.dragging.active = false;\n\n    this.unsubscribeOnMove();\n    this.unsubscribeOnEnd();\n\n    this.userChangeEnd.emit(this.getChangeContext());\n  }\n\n  private onPointerFocus(pointerType: PointerType): void {\n    const pointerElement: SliderHandleDirective = this.getPointerElement(pointerType);\n    pointerElement.on('blur', (): void => this.onPointerBlur(pointerElement));\n    pointerElement.on('keydown', (event: KeyboardEvent): void => this.onKeyboardEvent(event));\n    pointerElement.on('keyup', (): void => this.onKeyUp());\n    pointerElement.active = true;\n\n    this.currentTrackingPointer = pointerType;\n    this.currentFocusPointer = pointerType;\n    this.firstKeyDown = true;\n  }\n\n  private onKeyUp(): void {\n    this.firstKeyDown = true;\n    this.userChangeEnd.emit(this.getChangeContext());\n  }\n\n  private onPointerBlur(pointer: SliderHandleDirective): void {\n    pointer.off('blur');\n    pointer.off('keydown');\n    pointer.off('keyup');\n    pointer.active = false;\n    if (ValueHelper.isNullOrUndefined(this.touchId)) {\n      this.currentTrackingPointer = null;\n      this.currentFocusPointer = null;\n    }\n  }\n\n  private getKeyActions(currentValue: number): {[key: string]: number} {\n    const valueRange: number = this.viewOptions.ceil - this.viewOptions.floor;\n\n    let increaseStep: number = currentValue + this.viewOptions.step;\n    let decreaseStep: number = currentValue - this.viewOptions.step;\n    let increasePage: number = currentValue + valueRange / 10;\n    let decreasePage: number = currentValue - valueRange / 10;\n\n    if (this.viewOptions.reversedControls) {\n      increaseStep = currentValue - this.viewOptions.step;\n      decreaseStep = currentValue + this.viewOptions.step;\n      increasePage = currentValue - valueRange / 10;\n      decreasePage = currentValue + valueRange / 10;\n    }\n\n    // Left to right default actions\n    const actions: {[key: string]: number} = {\n      UP: increaseStep,\n      DOWN: decreaseStep,\n      LEFT: decreaseStep,\n      RIGHT: increaseStep,\n      PAGEUP: increasePage,\n      PAGEDOWN: decreasePage,\n      HOME: this.viewOptions.reversedControls ? this.viewOptions.ceil : this.viewOptions.floor,\n      END: this.viewOptions.reversedControls ? this.viewOptions.floor : this.viewOptions.ceil,\n    };\n    // right to left means swapping right and left arrows\n    if (this.viewOptions.rightToLeft) {\n      actions.LEFT = increaseStep;\n      actions.RIGHT = decreaseStep;\n      // right to left and vertical means we also swap up and down\n      if (this.viewOptions.vertical) {\n        actions.UP = decreaseStep;\n        actions.DOWN = increaseStep;\n      }\n    }\n    return actions;\n  }\n\n  private onKeyboardEvent(event: KeyboardEvent): void {\n    const currentValue: number = this.getCurrentTrackingValue();\n    const keyCode: number = !ValueHelper.isNullOrUndefined(event.keyCode)\n      ? event.keyCode\n      : event.which;\n    const keys: {[keyCode: number]: string} = {\n        38: 'UP',\n        40: 'DOWN',\n        37: 'LEFT',\n        39: 'RIGHT',\n        33: 'PAGEUP',\n        34: 'PAGEDOWN',\n        36: 'HOME',\n        35: 'END',\n      };\n    const actions: {[key: string]: number} = this.getKeyActions(currentValue);\n    const key: string = keys[keyCode];\n    const action: number = actions[key];\n\n    if (ValueHelper.isNullOrUndefined(action) || ValueHelper.isNullOrUndefined(this.currentTrackingPointer)) {\n      return;\n    }\n    event.preventDefault();\n\n    if (this.firstKeyDown) {\n      this.firstKeyDown = false;\n      this.userChangeStart.emit(this.getChangeContext());\n    }\n\n    const actionValue: number = MathHelper.clampToRange(action, this.viewOptions.floor, this.viewOptions.ceil);\n    const newValue: number = this.roundStep(actionValue);\n    if (!this.viewOptions.draggableRangeOnly) {\n      this.positionTrackingHandle(newValue);\n    } else {\n      const difference: number = this.viewHighValue - this.viewLowValue;\n      let newMinValue: number;\n      let newMaxValue: number;\n\n      if (this.currentTrackingPointer === PointerType.Min) {\n        newMinValue = newValue;\n        newMaxValue = newValue + difference;\n        if (newMaxValue > this.viewOptions.ceil) {\n          newMaxValue = this.viewOptions.ceil;\n          newMinValue = newMaxValue - difference;\n        }\n      } else if (this.currentTrackingPointer === PointerType.Max) {\n        newMaxValue = newValue;\n        newMinValue = newValue - difference;\n        if (newMinValue < this.viewOptions.floor) {\n          newMinValue = this.viewOptions.floor;\n          newMaxValue = newMinValue + difference;\n        }\n      }\n      this.positionTrackingBar(newMinValue, newMaxValue);\n    }\n  }\n\n  // onDragStart event handler, handles dragging of the middle bar\n  private onDragStart(pointerType: PointerType, event: MouseEvent|TouchEvent,\n    bindMove: boolean, bindEnd: boolean): void {\n    const position: number = this.getEventPosition(event);\n\n    this.dragging = new Dragging();\n    this.dragging.active = true;\n    this.dragging.value = this.positionToValue(position);\n    this.dragging.difference = this.viewHighValue - this.viewLowValue;\n    this.dragging.lowLimit = this.viewOptions.rightToLeft\n        ? this.minHandleElement.position - position\n        : position - this.minHandleElement.position;\n    this.dragging.highLimit = this.viewOptions.rightToLeft\n        ? position - this.maxHandleElement.position\n        : this.maxHandleElement.position - position;\n\n    this.onStart(pointerType, event, bindMove, bindEnd);\n  }\n\n  /** Get min value depending on whether the newPos is outOfBounds above or below the bar and rightToLeft */\n  private getMinValue(newPos: number, outOfBounds: boolean, isAbove: boolean): number {\n    const isRTL: boolean = this.viewOptions.rightToLeft;\n    let value: number = null;\n\n    if (outOfBounds) {\n      if (isAbove) {\n        value = isRTL\n          ? this.viewOptions.floor\n          : this.viewOptions.ceil - this.dragging.difference;\n      } else {\n        value = isRTL\n          ? this.viewOptions.ceil - this.dragging.difference\n          : this.viewOptions.floor;\n      }\n    } else {\n      value = isRTL\n        ? this.positionToValue(newPos + this.dragging.lowLimit)\n        : this.positionToValue(newPos - this.dragging.lowLimit);\n    }\n    return this.roundStep(value);\n  }\n\n  /** Get max value depending on whether the newPos is outOfBounds above or below the bar and rightToLeft */\n  private getMaxValue(newPos: number, outOfBounds: boolean, isAbove: boolean): number {\n    const isRTL: boolean = this.viewOptions.rightToLeft;\n    let value: number = null;\n\n    if (outOfBounds) {\n      if (isAbove) {\n        value = isRTL\n          ? this.viewOptions.floor + this.dragging.difference\n          : this.viewOptions.ceil;\n      } else {\n        value = isRTL\n          ? this.viewOptions.ceil\n          : this.viewOptions.floor + this.dragging.difference;\n      }\n    } else {\n      if (isRTL) {\n        value =\n          this.positionToValue(newPos + this.dragging.lowLimit) +\n          this.dragging.difference;\n      } else {\n        value =\n          this.positionToValue(newPos - this.dragging.lowLimit) +\n          this.dragging.difference;\n      }\n    }\n\n    return this.roundStep(value);\n  }\n\n  private onDragMove(event?: MouseEvent|TouchEvent): void {\n    const newPos: number = this.getEventPosition(event);\n\n    if (this.viewOptions.animate && !this.viewOptions.animateOnMove) {\n      if (this.moving) {\n        this.sliderElementAnimateClass = false;\n      }\n    }\n\n    this.moving = true;\n\n    let ceilLimit: number,\n        floorLimit: number,\n        floorHandleElement: SliderHandleDirective,\n        ceilHandleElement: SliderHandleDirective;\n    if (this.viewOptions.rightToLeft) {\n      ceilLimit = this.dragging.lowLimit;\n      floorLimit = this.dragging.highLimit;\n      floorHandleElement = this.maxHandleElement;\n      ceilHandleElement = this.minHandleElement;\n    } else {\n      ceilLimit = this.dragging.highLimit;\n      floorLimit = this.dragging.lowLimit;\n      floorHandleElement = this.minHandleElement;\n      ceilHandleElement = this.maxHandleElement;\n    }\n\n    const isUnderFloorLimit: boolean = (newPos <= floorLimit);\n    const isOverCeilLimit: boolean = (newPos >= this.maxHandlePosition - ceilLimit);\n\n    let newMinValue: number;\n    let newMaxValue: number;\n    if (isUnderFloorLimit) {\n      if (floorHandleElement.position === 0) {\n        return;\n      }\n      newMinValue = this.getMinValue(newPos, true, false);\n      newMaxValue = this.getMaxValue(newPos, true, false);\n    } else if (isOverCeilLimit) {\n      if (ceilHandleElement.position === this.maxHandlePosition) {\n        return;\n      }\n      newMaxValue = this.getMaxValue(newPos, true, true);\n      newMinValue = this.getMinValue(newPos, true, true);\n    } else {\n      newMinValue = this.getMinValue(newPos, false, false);\n      newMaxValue = this.getMaxValue(newPos, false, false);\n    }\n\n    this.positionTrackingBar(newMinValue, newMaxValue);\n  }\n\n  // Set the new value and position for the entire bar\n  private positionTrackingBar(newMinValue: number, newMaxValue: number): void {\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.minLimit) &&\n        newMinValue < this.viewOptions.minLimit) {\n      newMinValue = this.viewOptions.minLimit;\n      newMaxValue = MathHelper.roundToPrecisionLimit(newMinValue + this.dragging.difference, this.viewOptions.precisionLimit);\n    }\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.maxLimit) &&\n        newMaxValue > this.viewOptions.maxLimit) {\n      newMaxValue = this.viewOptions.maxLimit;\n      newMinValue = MathHelper.roundToPrecisionLimit(newMaxValue - this.dragging.difference, this.viewOptions.precisionLimit);\n    }\n\n    this.viewLowValue = newMinValue;\n    this.viewHighValue = newMaxValue;\n    this.applyViewChange();\n    this.updateHandles(PointerType.Min, this.valueToPosition(newMinValue));\n    this.updateHandles(PointerType.Max, this.valueToPosition(newMaxValue));\n  }\n\n  // Set the new value and position to the current tracking handle\n  private positionTrackingHandle(newValue: number): void {\n    newValue = this.applyMinMaxLimit(newValue);\n    if (this.range) {\n      if (this.viewOptions.pushRange) {\n        newValue = this.applyPushRange(newValue);\n      } else {\n        if (this.viewOptions.noSwitching) {\n          if (this.currentTrackingPointer === PointerType.Min &&\n              newValue > this.viewHighValue) {\n            newValue = this.applyMinMaxRange(this.viewHighValue);\n          } else if (this.currentTrackingPointer === PointerType.Max &&\n                     newValue < this.viewLowValue) {\n            newValue = this.applyMinMaxRange(this.viewLowValue);\n          }\n        }\n        newValue = this.applyMinMaxRange(newValue);\n        /* This is to check if we need to switch the min and max handles */\n        if (this.currentTrackingPointer === PointerType.Min && newValue > this.viewHighValue) {\n          this.viewLowValue = this.viewHighValue;\n          this.applyViewChange();\n          this.updateHandles(PointerType.Min, this.maxHandleElement.position);\n          this.updateAriaAttributes();\n          this.currentTrackingPointer = PointerType.Max;\n          this.minHandleElement.active = false;\n          this.maxHandleElement.active = true;\n          if (this.viewOptions.keyboardSupport) {\n            this.maxHandleElement.focus();\n          }\n        } else if (this.currentTrackingPointer === PointerType.Max &&\n                   newValue < this.viewLowValue) {\n          this.viewHighValue = this.viewLowValue;\n          this.applyViewChange();\n          this.updateHandles(PointerType.Max, this.minHandleElement.position);\n          this.updateAriaAttributes();\n          this.currentTrackingPointer = PointerType.Min;\n          this.maxHandleElement.active = false;\n          this.minHandleElement.active = true;\n          if (this.viewOptions.keyboardSupport) {\n            this.minHandleElement.focus();\n          }\n        }\n      }\n    }\n\n    if (this.getCurrentTrackingValue() !== newValue) {\n      if (this.currentTrackingPointer === PointerType.Min) {\n        this.viewLowValue = newValue;\n        this.applyViewChange();\n      } else if (this.currentTrackingPointer === PointerType.Max) {\n        this.viewHighValue = newValue;\n        this.applyViewChange();\n      }\n      this.updateHandles(this.currentTrackingPointer, this.valueToPosition(newValue));\n      this.updateAriaAttributes();\n    }\n  }\n\n  private applyMinMaxLimit(newValue: number): number {\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.minLimit) && newValue < this.viewOptions.minLimit) {\n      return this.viewOptions.minLimit;\n    }\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.maxLimit) && newValue > this.viewOptions.maxLimit) {\n      return this.viewOptions.maxLimit;\n    }\n    return newValue;\n  }\n\n  private applyMinMaxRange(newValue: number): number {\n    const oppositeValue: number = (this.currentTrackingPointer === PointerType.Min)\n      ? this.viewHighValue\n      : this.viewLowValue;\n    const difference: number = Math.abs(newValue - oppositeValue);\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.minRange)) {\n      if (difference < this.viewOptions.minRange) {\n        if (this.currentTrackingPointer === PointerType.Min) {\n          return MathHelper.roundToPrecisionLimit(this.viewHighValue - this.viewOptions.minRange, this.viewOptions.precisionLimit);\n        } else if (this.currentTrackingPointer === PointerType.Max) {\n          return MathHelper.roundToPrecisionLimit(this.viewLowValue + this.viewOptions.minRange, this.viewOptions.precisionLimit);\n        }\n      }\n    }\n    if (!ValueHelper.isNullOrUndefined(this.viewOptions.maxRange)) {\n      if (difference > this.viewOptions.maxRange) {\n        if (this.currentTrackingPointer === PointerType.Min) {\n          return MathHelper.roundToPrecisionLimit(this.viewHighValue - this.viewOptions.maxRange, this.viewOptions.precisionLimit);\n        } else if (this.currentTrackingPointer === PointerType.Max) {\n          return MathHelper.roundToPrecisionLimit(this.viewLowValue + this.viewOptions.maxRange, this.viewOptions.precisionLimit);\n        }\n      }\n    }\n    return newValue;\n  }\n\n  private applyPushRange(newValue: number): number {\n    const difference: number = (this.currentTrackingPointer === PointerType.Min)\n          ? this.viewHighValue - newValue\n          : newValue - this.viewLowValue;\n    const minRange: number = (!ValueHelper.isNullOrUndefined(this.viewOptions.minRange))\n          ? this.viewOptions.minRange\n          : this.viewOptions.step;\n    const maxRange: number = this.viewOptions.maxRange;\n    // if smaller than minRange\n    if (difference < minRange) {\n      if (this.currentTrackingPointer === PointerType.Min) {\n        this.viewHighValue = MathHelper.roundToPrecisionLimit(\n          Math.min(newValue + minRange, this.viewOptions.ceil), this.viewOptions.precisionLimit);\n        newValue = MathHelper.roundToPrecisionLimit(this.viewHighValue - minRange, this.viewOptions.precisionLimit);\n        this.applyViewChange();\n        this.updateHandles(PointerType.Max, this.valueToPosition(this.viewHighValue));\n      } else if (this.currentTrackingPointer === PointerType.Max) {\n        this.viewLowValue = MathHelper.roundToPrecisionLimit(\n          Math.max(newValue - minRange, this.viewOptions.floor), this.viewOptions.precisionLimit);\n        newValue = MathHelper.roundToPrecisionLimit(this.viewLowValue + minRange, this.viewOptions.precisionLimit);\n        this.applyViewChange();\n        this.updateHandles(PointerType.Min, this.valueToPosition(this.viewLowValue));\n      }\n      this.updateAriaAttributes();\n    } else if (!ValueHelper.isNullOrUndefined(maxRange) && difference > maxRange) {\n      // if greater than maxRange\n      if (this.currentTrackingPointer === PointerType.Min) {\n        this.viewHighValue = MathHelper.roundToPrecisionLimit(newValue + maxRange, this.viewOptions.precisionLimit);\n        this.applyViewChange();\n        this.updateHandles(PointerType.Max, this.valueToPosition(this.viewHighValue)\n        );\n      } else if (this.currentTrackingPointer === PointerType.Max) {\n        this.viewLowValue = MathHelper.roundToPrecisionLimit(newValue - maxRange, this.viewOptions.precisionLimit);\n        this.applyViewChange();\n        this.updateHandles(PointerType.Min, this.valueToPosition(this.viewLowValue));\n      }\n      this.updateAriaAttributes();\n    }\n    return newValue;\n  }\n\n  private getChangeContext(): ChangeContext {\n    const changeContext: ChangeContext = new ChangeContext();\n    changeContext.pointerType = this.currentTrackingPointer;\n    changeContext.value = +this.value;\n    if (this.range) {\n      changeContext.highValue = +this.highValue;\n    }\n    return changeContext;\n  }\n}\n","import { Component, Input, TemplateRef } from '@angular/core';\n\n@Component({\n  selector: 'ngx-slider-tooltip-wrapper',\n  template: `<ng-container *ngIf=\"template\">\n  <ng-template *ngTemplateOutlet=\"template; context: {tooltip: tooltip, placement: placement, content: content}\"></ng-template>\n</ng-container>\n\n<ng-container *ngIf=\"!template\">\n  <div class=\"ngx-slider-inner-tooltip\" [attr.title]=\"tooltip\" [attr.data-tooltip-placement]=\"placement\">\n    {{content}}\n  </div>\n</ng-container>`,\n  styles: [`.ngx-slider-inner-tooltip{height:100%}`]\n})\nexport class TooltipWrapperComponent {\n  @Input()\n  template: TemplateRef<any>;\n\n  @Input()\n  tooltip: string;\n\n  @Input()\n  placement: string;\n\n  @Input()\n  content: string;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SliderComponent } from './slider.component';\nimport { SliderElementDirective } from './slider-element.directive';\nimport { SliderHandleDirective } from './slider-handle.directive';\nimport { SliderLabelDirective } from './slider-label.directive';\nimport { TooltipWrapperComponent } from './tooltip-wrapper.component';\n\n/**\n * NgxSlider module\n *\n * The module exports the slider component\n */\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    SliderComponent,\n    SliderElementDirective,\n    SliderHandleDirective,\n    SliderLabelDirective,\n    TooltipWrapperComponent\n  ],\n  exports: [\n    SliderComponent\n  ]\n})\nexport class NgxSliderModule { }\n"],"names":["Low","High","Floor","Ceil","TickValue","Options","Min","Max","ChangeContext","ValueHelper","isNullOrUndefined","value","undefined","areArraysEqual","array1","array2","length","i","linearValueToPosition","val","minVal","maxVal","logValueToPosition","Math","log","linearPositionToValue","percent","logPositionToValue","exp","findStepIndex","modelValue","stepsArray","differences","map","step","abs","minDifferenceIndex","index","CompatibilityHelper","isTouchEvent","event","TouchEvent","touches","isResizeObserverAvailable","ResizeObserver","MathHelper","roundToPrecisionLimit","precisionLimit","toPrecision","isModuloWithinPrecisionLimit","modulo","limit","pow","clampToRange","floor","ceil","min","max","EventListener","EventListenerHelper","prototype","attachPassiveEventListener","nativeElement","eventName","callback","throttleInterval","detectPassiveEvents","hasSupport","this","attachEventListener","listener","events","Subject","observerCallback","next","addEventListener","passive","capture","teardownCallback","removeEventListener","eventsSubscription","pipe","tap","throttleTime","leading","trailing","subscribe","detachEventListener","eventListener","unsubscribe","complete","renderer","listen","Object","defineProperty","SliderElementDirective","_position","_dimension","_alwaysHide","_vertical","_scale","setAlwaysHide","hide","visibility","opacity","show","alwaysHide","isVisible","setVertical","vertical","left","width","bottom","height","setScale","scale","setPosition","pos","isRefDestroyed","changeDetectionRef","markForCheck","round","calculateDimension","getBoundingClientRect","top","right","setDimension","dim","elemRef","on","debounceInterval","eventListenerHelper","eventListeners","push","onPassive","off","listenersToKeep","listenersToRemove","filter","listenersToRemove_1","tslib_1.__values","listenersToRemove_1_1","done","Directive","args","selector","ElementRef","Renderer2","ChangeDetectorRef","HostBinding","tslib_1.__extends","SliderHandleDirective","focus","_this","_super","call","SliderLabelDirective","_value","setValue","recalculateDimension","dimension","innerHTML","Tick","Dragging","ModelValues","compare","x","y","highValue","ModelChange","forceChange","NGX_SLIDER_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","SliderComponent","multi","manualRefresh","unsubscribeManualRefresh","manualRefreshSubscription","setTimeout","calculateViewDimensionsAndDetectChanges","triggerFocus","unsubscribeTriggerFocus","triggerFocusSubscription","pointerType","focusPointer","viewOptions","showTicks","ngOnInit","assign","options","updateDisabledState","updateVerticalState","ngAfterViewInit","applyOptions","subscribeInputModelChangeSubject","inputEventsInterval","subscribeOutputModelChangeSubject","outputEventsInterval","renormaliseModelValues","viewLowValue","modelValueToViewValue","range","viewHighValue","manageElementsStyle","calculateViewDimensions","addAccessibility","updateCeilLabel","updateFloorLabel","initHandles","manageEventsBindings","subscribeResizeObserver","initHasRun","detectChanges","ngOnChanges","changes","onChangeOptions","inputModelChangeSubject","internalChange","ngOnDestroy","unbindEvents","unsubscribeResizeObserver","unsubscribeInputModelChangeSubject","unsubscribeOutputModelChangeSubject","writeValue","obj","Array","registerOnChange","onChangeCallback","registerOnTouched","onTouchedCallback","setDisabledState","isDisabled","disabled","onResize","interval","inputModelChangeSubscription","distinctUntilChanged","modelChange","applyInputModelChange","outputModelChangeSubscription","outputModelChangeSubject","publishOutputModelChange","resizeObserver","observe","elementRef","disconnect","unsubscribeOnMove","onMoveEventListener","unsubscribeOnEnd","onEndEventListener","getPointerElement","PointerType","minHandleElement","maxHandleElement","getCurrentTrackingValue","currentTrackingPointer","NaN","bindIndexForStepsArray","viewValueToModelValue","viewValue","getStepValue","sliderValue","applyViewChange","userEventInitiated","normalisedModelChange","normaliseModelValues","normalisationChange","updateLowHandle","valueToPosition","updateHighHandle","updateSelectionBar","updateTicksScale","updateAriaAttributes","updateCombinedLabel","emitOutputs","valueChange","emit","highValueChange","userChange","getChangeContext","input","tempValue","normalisedInput","enforceStep","roundStep","enforceRange","noSwitching","enforceStepsArray","valueIndex","highValueIndex","previousModelValues","normalisedModelValues","previousInputEventsInterval","previousOutputEventsInterval","previousOptionsInfluencingEventBindings","rebindEvents","getOptionsInfluencingEventBindings","newOptionsInfluencingEventBindings","resetSlider","draggableRange","draggableRangeOnly","showTicksValues","ticksArray","tickStep","intermediateTicks","showSelectionBar","showSelectionBarEnd","showSelectionBarFromValue","applyFloorCeilOptions","applyStepsArrayOptions","combineLabels","minValue","maxValue","logScale","Error","translate","String","refocusPointerIfNeeded","currentFocusPointer","onPointerFocus","updateScale","floorLabelElement","hideLimitLabels","ceilLabelElement","hideLabelsForTicks","minHandleLabelElement","hidePointerLabels","maxHandleLabelElement","combinedLabelElement","selectionBarElement","leftOuterSelectionBarElement","showOuterSelectionBars","rightOuterSelectionBarElement","fullBarTransparentClass","selectionBarDraggableClass","onlyBindHandles","ticksUnderValuesClass","sliderElementVerticalClass","sliderElementAnimateClass","animate","readOnly","bindEvents","sliderElementDisabledAttr","_a","getAllSliderElements","_b","element","fullBarElement","ticksElement","role","keyboardSupport","tabindex","ariaOrientation","ariaLabel","ariaLabelledBy","ariaLabelHigh","ariaLabelledByHigh","ariaValueNow","toString","ariaValueText","LabelType","ariaValueMin","ariaValueMax","handleDimension","handleWidth","handleHalfDimension","barDimension","maxHandlePosition","getTicksArray","rightToLeft","reverse","tickValueStep","hasAtLeastOneLegend","newTicks","position","translation","tick","selected","isTickSelected","style","-webkit-transform","-moz-transform","-o-transform","-ms-transform","transform","getSelectionBarColor","getTickColor","ticksTooltip","tooltip","tooltipPlacement","getDisplayValue","ticksValuesTooltip","valueTooltip","valueTooltipPlacement","legend","getLegend","sliderElementWithLegendClass","ticks","numberOfValues","center","updateHandles","which","newPos","getHandleLabelPos","labelType","labelDimension","nearHandlePos","endOfBarPos","boundPointerLabels","getPointerColor","minPointerStyle","backgroundColor","autoHideLimitLabels","updateFloorAndCeilLabelsVisibility","maxPointerStyle","floorLabelHidden","ceilLabelHidden","isMinLabelAtCeil","isCombinedLabelAtFloor","isCombinedLabelAtCeil","hideCeil","hideFloor","isMinLabelAtFloor","isLabelBelowFloorLabel","isLabelAboveCeilLabel","isMaxLabelAtCeil","label","floorPos","floorDim","ceilPos","ceilDim","offset","color","isSelectionBarFromRight","positionForRange","centerPosition","selectionBarGradient","reversed","direction","barStyle","backgroundImage","from","to","backgroundPosition","backgroundSize","lowDisplayValue","highDisplayValue","combinedLabelValue","customStep","steppedDifference","fn","customValueToPosition","positionToValue","customPositionToValue","getEventXY","targetTouchId","MouseEvent","clientY","clientX","touchIndex","identifier","getEventPosition","sliderElementBoundingRect","sliderPos","getNearestHandle","distanceMin","distanceMax","onBarStart","onStart","bindMove","bindEnd","simulateImmediateMove","simulateImmediateEnd","onDragStart","stopPropagation","preventDefault","moving","pointerElement","active","onMoveCallback","e","dragging","onDragMove","onMove","document","touchEventsInterval","mouseEventsInterval","onEndCallback","onEnd","userChangeStart","changedTouches","touchId","fromTick","touchForThisSlider","animateOnMove","ceilValue","floorValue","newValue","positionTrackingHandle","userChangeEnd","onPointerBlur","onKeyboardEvent","onKeyUp","firstKeyDown","pointer","getKeyActions","currentValue","valueRange","increaseStep","decreaseStep","increasePage","decreasePage","reversedControls","actions","UP","DOWN","LEFT","RIGHT","PAGEUP","PAGEDOWN","HOME","END","keyCode","action","38","40","37","39","33","34","36","35","actionValue","difference","newMaxValue","newMinValue","positionTrackingBar","lowLimit","highLimit","getMinValue","outOfBounds","isAbove","isRTL","getMaxValue","floorHandleElement","ceilHandleElement","ceilLimit","floorLimit","isUnderFloorLimit","isOverCeilLimit","minLimit","maxLimit","applyMinMaxLimit","pushRange","applyPushRange","applyMinMaxRange","oppositeValue","minRange","maxRange","changeContext","Component","template","styles","host","class","providers","NgZone","Input","Output","ViewChild","read","ContentChild","HostListener","zone","EventEmitter","TooltipWrapperComponent","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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"}